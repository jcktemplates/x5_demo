/*
 * 
 * WaveCMS 
 *
 * editor.js
 *
 * COPYRIGHT
 * 
 * All use of this code must be according to agreement with the owners
 * of WaveCMS - www.wavecms.eu
 * 
 */

;

String.prototype.ucfirst = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
}

/*
 * Define array prototype indexOf for IE < 9.
 */
if (!Array.prototype.indexOf)
{
  Array.prototype.indexOf = function(elt /*, from*/)
  {
    var len = this.length >>> 0;

    var from = Number(arguments[1]) || 0;
    from = (from < 0)
         ? Math.ceil(from)
         : Math.floor(from);
    if (from < 0)
      from += len;

    for (; from < len; from++)
    {
      if (from in this &&
          this[from] === elt)
        return from;
    }
    return -1;
  };
}

var editor = { id: null, state: null },
	jCropObject = {x: null, y: null, w: null, h: null, fileName: null, id: null },
	jCropAPI,
	hasUnsavedChanges = false,
	textObjects = {},
    isDragging = null,
    isDraggingSideMenuElement = false,
    isPressed = false,
    dontAttachRedactor = false,
    scriptsCuttetBeforeDrag = [],
	isCSSBtnDropInProgress = false;

function checkIfURLExist(url) {
	// If URL exist in projectfiles, we just use it as is.
	if (projectFiles.menu.indexOf(url) > -1)
	{
		return url;
	} else {

		//
		// Using jQuery regex pattern for URL matching.
		// If URL verbs are matched, we use the user entered url. Else we insert protocol 'http://' to the
		// URL as a qualifyed guess.
		if (/^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(url))
		{
			return url;
		} else {
			return 'http://' + url;
		}


	}
}


function cropImage($img) {
	// Set editor id and state to the current element.
	editor.id 	 = $img.attr('id');
	editor.state = 'crop';

	jCropObject.fileName = $img.attr('src');
	jCropObject.id 		 = $img.attr('id');

	function showCoords(c)
	{
		jCropObject.x = c.x;
		jCropObject.y = c.y;
		jCropObject.w = c.w;
		jCropObject.h = c.h;
	}

	$img.Jcrop({
		onChange: showCoords,
		onSelect: showCoords
	}, function() {
		jCropAPI = this;
		this.setSelect([10, 10, ($img.width() - 10), ($img.height() - 10)]);
	});
}

//
// Anchors are relative when generated by X5.
// We need to fix this, when we are editing the page.
// This is the case, since we load all files from our own file retrieving function.
//
function wavecms_anchors() {
        $('a').live('click', function() {

                // If link is external, open it in new target window. Else carry open it in the current iframe.
                if ($(this).attr('href').indexOf('http') !== -1 || $(this).attr('href').indexOf('https') !== -1)
                {
                        window.open($(this).attr('href'));
                        return false;
                } else if ($(this).attr('href').indexOf('.html') !== -1 ||
                           $(this).attr('href').indexOf('.htm') !== -1 ) {
                        window.location.assign(urlAnchorBase + $(this).attr('href'));
                        return false;
                } else {
                        //alert('This link is not supported by WaveCMS. Only webpages can be edited. Please make sure you are not trying opening a picture. Feel free to contact support if needed.');
                }

        });
}

function widget(size) {

	if (typeof size === 'undefined')
	{
		var size = 'normal';
	}

	// If widget is already attached to DOM, we remove it.
	$('div.widget-container').remove();

	if ($.cookie('widget_state') == 1 || $.cookie('widget_state') == undefined)
	{
		var widgetState    = {};
		var widgetCloseCSS = ((size == 'normal') ? { right: '-45px', top: '40px' } : { right: '0px', top: '40px' });
	} else {
		var widgetState    = ((size == 'normal') ? { left: '-93px' } : { left: '-64px' });
		var widgetCloseCSS = ((size == 'normal') ? { right: '-45px', top: '40px', backgroundImage: 'url(' + urlDomBase + '/img/menu/iconVerticalArrowNormalExpand.png)' } : { right: '0px', top: '40px', backgroundImage: 'url(' + urlDomBase + '/img/menu/iconVerticalArrowSmallExpand.png)' });
	}


	$('<div />').addClass('widget-container ' + size).css(widgetState).html(
		[
			// Widget-close handler for the widget-container
			$('<div />').addClass('widget-close tour_hideBar').css(widgetCloseCSS)
												 .on('click', function() {
													$parent = $(this).parent();
													$this = $(this);

													if (size == 'normal')
													{
													 	if ($parent.offset().left < 0)
													 	{
													 		$.cookie('widget_state', 1, { expires: 99 });
															$parent.animate({ left: 0 }, 1000, function() { $this.css({ backgroundImage: 'url(' + urlDomBase + '/img/menu/iconVerticalArrowNormalCollapse.png)' }) });
													 	} else {
															$.cookie('widget_state', 0, { expires: 99 });
															$parent.animate({ left: parseInt('-' + $parent.width()) }, 1000, function() { $this.css({ backgroundImage: 'url(' + urlDomBase + '/img/menu/iconVerticalArrowNormalExpand.png)' }) });
														}
													} else {
													 	if ($parent.offset().left < 0)
													 	{
													 		$.cookie('widget_state', 1, { expires: 99 });
															$parent.animate({ left: 0 }, 1000, function() { $this.css({ backgroundImage: 'url(' + urlDomBase + '/img/menu/iconVerticalArrowSmallCollapse.png)' }) });
													 	} else {
													 		$.cookie('widget_state', 0, { expires: 99 });
															$parent.animate({ left: '-64px' }, 1000, function() { $this.css({ backgroundImage: 'url(' + urlDomBase + '/img/menu/iconVerticalArrowSmallExpand.png)' }) });
														}
													}
												 }),

			// Widget-top grafics element
			$('<div />').addClass('widget-top no-selection'),
			// Widget-gradient grafics element
			$('<div />').addClass('widget-gradient no-selection ' + size).html(
				[
					// Widget-logo "WaveCMS"
					$('<img />').attr('src', urlDomBase + 'img/logo' + ((size == 'normal') ? 'Normal' : 'Small') + '.png').addClass('widget-logo'),
					$('<span />').addClass('widget-icon widget-icon-plus tour_addButtons no-selection').html($('<img />').attr('src', urlDomBase + '/img/icons/iconAdd.png')),
					$('<span />').addClass('widget-icon widget-icon-save tour_save no-selection').html($('<img />').attr('src', urlDomBase + '/img/icons/iconSave.png')),
					$('<span />').addClass('widget-icon widget-icon-logout tour_logout no-selection').html($('<img />').attr('src', urlDomBase + '/img/icons/iconLogout.png')),
					$('<span />').addClass('widget-icon widget-icon-wheel tour_advanced_settings no-selection').html($('<img />').attr('src', urlDomBase + '/img/icons/Wheel48.png')),
					$('<span />').addClass('widget-icon widget-icon-trash tour_trashbin no-selection').html($('<img />').attr('src', urlDomBase + '/img/icons/iconTrash.png'))
				]
			),
			// Widget-bottom grafics element
			$('<div />').addClass('widget-bottom no-selection'),
			// Widget-options
			$('<div />').addClass('widget-options no-selection')
		]
	).appendTo('html');
}

function wrenchify(force) {

	// If fallr is open, do not wrenchify (unless it is forced to do so)
	if ( typeof force === 'undefined' && $('#fallr-wrapper').length) {
		return false;
	}

	// Remove all previous added wrenches
	$('span.icon-edit, span.icon-cut, span.icon-settings').remove();

	if ($('img[id^="imObjectImage_"]').parent().hasClass('ui-wrapper'))
	{
		$('img[id^="imObjectImage_"]').parent().parent().css({ backgroundColor: 'transparent', border: 0 });
	}


	$('div[id^="wowslider-container_"]').each(function(key, val) {

        // Make parent position relative and get left position of object
        $(this).parent().css({ position: 'relative'});
        
		var positionLeft = $(this).parent().width() - 36;
		$this = $(this);

		$(this).parent().append($('<span/>').addClass('menu-icon-container icon-edit').css({ left: positionLeft, 'z-index': 900 }).html(
																				 $('<img />').attr('src', urlDomBase + '/img/icons/iconEditPencil.png')
																							 .css({ width: '26px', height: '26px' })
																				).on('click', function() {

				var WOWSliderUUID   = $(this).parent().find('div[id^="wowslider-container_"]').attr('id').replace(/^\D+/g, '');
			 	var matchContent 	= new RegExp('wowSlider\\({.+}\\)').exec(String($('#wowslider-script_' + WOWSliderUUID).text()));
			 	var scriptTagObject = eval('(' + matchContent[0].replace('wowSlider', '') + ')');
			 	scriptTagObject.transistionEffect = scriptTagObject.effect;

			 	var theme = $(this).attr('class').replace('wowslider-container_', '');

		  		content = { UUID: WOWSliderUUID, images: [], settings: {
		  						theme: 'terse',
		  						transistionEffect: null,
		  						autoPlay: true,
		  						stopOnHover: false,
		  						controls: true,
		  						caption: true,
		  						captionEffect: null,
		  						duration: null,
		  						delay: null,
		  						dimensions: String(scriptTagObject.width + 'x' + scriptTagObject.height)
		  				  }};

		  		// Extend basic options with evalled options from script-tag.
		  		$.extend(content.settings, scriptTagObject);

				// Grab all image from markup
			 	var matchContentImages = new RegExp('ws_images">.+</ul>').exec(String($('#wowslider-script_' + WOWSliderUUID).text()));
				content.images = $(matchContentImages[0].replace('ws_images">', ''));
				content.theme  = theme;
		
				var gapH    = 20;
				var gapW 	= 200;
				var boxH    = $(window).height() - gapH;     // bottom gap
				var boxW    = $(window).width() - gapW * 2;  // left + right gap
				$this = $(this);
				$.fallr('show', {
					icon 	: 'gear',
					closeKey        : true,
					closeOverlay    : true,
				    content : templateWOWSlider(content),
				    width   : boxW,
				    height  : boxH,
				    buttons : {
				    	button1 : {text: 'Next step', onclick: function() {
				    		content.settings.theme 	   		   = $('select[name="theme"]').val();
				    		content.settings.transistionEffect = $('select[name="transistionEffect"]').val();
				    		content.settings.autoPlay 		   = $('input[name="autoPlay"]').is(':checked');
				    		content.settings.stopOnHover 	   = $('input[name="stopOnHover"]').is(':checked');
				    		content.settings.controls 		   = $('input[name="controls"]').is(':checked');
				    		content.settings.delay 			   = $('select[name="delay"]').val();
				    		content.settings.duration 		   = $('select[name="duration"]').val();
				    		content.settings.dimensions 	   = $('select[name="dimensions"]').val();
				    		content.UUID = WOWSliderUUID;

				    		if ($('select[name="captionEffect"]').val() == 'false')
				    		{
					    		content.settings.caption 		   = false;
					    	} else {
					    		content.settings.caption 		   = true;
					    		content.settings.captionEffect 	   = $('select[name="captionEffect"]').val();
					    	}

				    		var waitForBackend = function(response) {

				    			content.settings = response.settings;

					    		content.images = [];
					    		$('ul.WOWSlider-strip li').each(function(key, val) {

					    			if ($(this).attr('id') == 'slideshowLoaderImage')
					    			{
					    				// Skip image if it the slideshow upload icon.
					    				return true;
					    			}

				    			var imageObject = { fileName: $(val).find('img').attr('src').substr($(val).find('img').attr('src').lastIndexOf('/') + 1), 
									    			title: $.trim($(val).find('input[name="title"]').val()), 
									    			description: $.trim($(val).find('input[name="description"]').val()), 
									    			url: checkIfURLExist($.trim($(val).find('input[name="url"]').val())),
									    			width: $(val).find('img').width(),
									    			height: $(val).find('img').height()
					    		};
								content.images.push(imageObject);
					    		});

					    		insertWOWSlider($this, $('#wowslider-container_' + WOWSliderUUID).parent(), content, true);
					    		$.fallr('hide');
					    	}

					    	$('#WOWSliderSettings').hide();
					    	$('#WOWSliderImageUpload').hide();
				    		$('#fallr').append('... Please wait.');
				    		queryBackend(urlUploadWOWSliderCrop, { UUID: WOWSliderUUID, dimensions: content.settings.dimensions, settings: content.settings }, waitForBackend, 'POST');

				    		wrenchify();
				    	}},
				    	button2 : {text: languagePack.fallr_cancel, onclick: function() {

							$('a.WOWSliderDrag').remove();

							$WOWSlider = makeWOWSliderDraggable($('<a />').addClass('WOWSliderDrag').data('WOWSlider', 1).css({ color: '#000000' }).html('<img src="img/icons/iconSlideshow.png" style="height: 20px; margin-right: 6px; margin-left: 5px;" />WaveSlider'));
							$WOWSlider.appendTo($('div.widget-options-container > div.wowsliderContainer'));
				    		$.fallr('hide');

				    		wrenchify();
				    		return false;

				    	}}
				    },
				    afterHide: function() {
				    	wrenchify();
					}
				},
			    function() {

	        		$('span.removeWOWSliderImage').live('click', function() {
				   		$(this).parent().remove();
				    });

			    	$('#fallr-button-button1').attr('id', 'btnWOWSliderNextStep');

			    	$('#btnWOWSliderNextStep').live('click', function() {

			    		$('#btnWOWSliderNextStep').attr('id', 'fallr-button-button1').text('Save');

			    		if ($('select[name="captionEffect"]').val() == 'false')
			    		{
				    		content.settings.caption 		   = false;
				    	} else {
				    		content.settings.caption 		   = true;
				    		content.settings.captionEffect 	   = $('select[name="captionEffect"]').val();
				    	}

					    $('ul.WOWSlider-strip').sortable({
							start: function() {
							},
							stop: function() {

							},
					        placeholder: {
					 			element: function(currentItem) {
					            	return $('<li />').css({
					            		width: (parseInt(currentItem.width(), 10) - 10) + 'px',
					            		height: (parseInt(currentItem.height(), 10) - 10) + 'px',
					            		margin: '3px',
					            		backgroundColor: 'gray',
					            		opacity: '0.2',
					            		border: '1px black dotted',
					            		float: 'left'
					            	})[0];
						        },
						        update: function(container, p) {
						            return;
						        }
					        }
					    });

						$('#fileupload').fileupload({
					        dataType: 'json',
					        formData: [
					        	{ name: 'UUID', value: WOWSliderUUID },
					        	{ name: 'dimensions', value: $('select[name="dimensions"] option:selected').val()}
					        ],
					        add: function (e, data) {

					        	// Add loader to notify the user that we are doing something in the background.
					        	$('ul.WOWSlider-strip').append('<li id="slideshowLoader" style="height: 50px; position: relative;"><img id="slideshowLoaderImage" src="' + urlDomBase + '/img/icons/iconPreloader.gif" style="position: absolute; height: 32px; width: 32px; top: 30px; left: 88px;" /></li>');

					        	data.submit();
					        },
					        done: function (e, data) {
					        	$('#slideshowLoader').remove();


								if (data.result.width > 200 || data.result.height > 200)
					        	{
					        		if (data.result.width >= data.result.height)
					        		{
					        			var width = 200;
					        			var height = 200 / (data.result.width / data.result.height);
					        		} else {
					        			var height = 200;
					        			var width  = 200 / (data.result.height / data.result.width);
					        		}
					        	} else {
					        		var width  = data.result.width;
					        		var height = data.result.height;
					        	}

					        	$('ul.WOWSlider-strip').append(
					        		$('<li />').css({ position: 'relative' }).html([
					        			$('<span>').css({ 'background-color': 'red', width: '20px', height: '20px', cursor: 'pointer', 'text-align': 'center', position: 'absolute', top: 0, right: 0 })
					        					   .text('X')
					        					   .on('click', function() {
					        					   		$(this).parent().remove();
					        					   }),
					        			$('<div />').css({
					        						  'margin-bottom': '10px',
					        						  width: '200px',
					        						  'max-width': '200px',
					        						  height: '200px',
					        						  'max-height': '200px',
					        						  'background-color': '#ffffff' }).html(
					        				$('<img />').css({ width: width + 'px', height: height + 'px', margin: ((200 - height) / 2) + 'px' + ' ' + ((200 - width) / 2) + 'px' }).attr('src', 'img/wowslider/images/' + WOWSliderUUID + '/original/' + data.result.fileName)
				        				),
					        			$('<input />').attr('name', 'title').attr('placeholder', languagePack.wowslider_placeholder_image_title),
					        			$('<input />').attr('name', 'description').attr('placeholder', languagePack.wowslider_placeholder_image_description),
					        			$('<input />').attr('name', 'url').attr('placeholder', languagePack.wowslider_placeholder_target_url)
					        		])
					        	);
					        },
					        error: function(jqXHR, textStatus, errorThrown) {
					        	$('#slideshowLoader').remove();
								alert('An unexpected error occured.' + "\n\nError description:\n\"" + jqXHR.responseText + '\n\n' + errorThrown + "\"\n\nPlease try uploading the image again or contact WaveCMS support including the error description.");
							}
				    	});

			    		$('#WOWSliderSettings').hide();
			    		$('#WOWSliderImageUpload').show();
			    		return false;
			    	});
		    	});








																				}));
	});


	var markupArray = [];
	$('div[id^="imHTMLObject_"]').each(function(key, val) {

        // Make parent position relative and get left position of object
        $(this).parent().css({ position: 'relative'});

		var positionLeft = ($(this).position().left + $(this).width()) - 36;

		markupArray.push($(val).html());
		$this = $(this);
        
		$(this).parent().append($('<span/>').addClass('menu-icon-container icon-edit').css({ left: positionLeft }).html(
																				 $('<img />').attr('src', urlDomBase + '/img/icons/iconEditPencil.png')
																							 .css({ width: '26px', height: '26px' })
																				).on('click', (function (HTMLObject, markupArray, key ) { 
																									return function() {
																										showEditHTMLObjectFallr( HTMLObject, markupArray, key ); 
																									};
																							  })( $this, markupArray, key )
																					));
	});

	$('img[id^="imObjectImage_"]').each(function(key, val) {

		// Add tooltip on first text object
		var addExtraClass = '',
			addExtraClass2 = '';
		if (key < 1)
		{
			addExtraClass = 'tour_imImageEdit tour_imImageScale';
			addExtraClass2 = 'tour_imImageCrop';
		}

        // Make parent position relative and get left position of object
        $(this).parent().css({ position: 'relative'});

		var id = $(this).attr('id'),
                    imageObject = $(this),
                    positionLeft = ($(this).position().left + $(this).width()) - 36;

		$(this).parent().append($('<span/>').addClass('menu-icon-container icon-edit ' + addExtraClass).css({ left: positionLeft }).html(
																		 $('<img />').attr('src', urlDomBase + '/img/icons/iconEditPencil.png')
																					 .css({ width: '26px', height: '26px' })
																		).on('click', function() {

                                                                            // Parent width and height
                                                                            var parentWidth  = $(imageObject).parent().css('width'),
                                                                                parentHeight = $(imageObject).parent().css('height'),
                                                                                parentWidth  = parentWidth.replace('px', ''),
                                                                                parentHeight = parentHeight.replace('px', '');


																			$this = $(this);
																			$(this).parent().find('span.icon-edit, span.icon-cut').hide();
																			$('img[id^="imObjectImage_"].ui-resizable').resizable('destroy');

																		    $.fallr('show', {
																			    buttons : {
																			        button2 : {text: languagePack.fallr_cancel, onclick: function() {
                                                                                            wrenchify(true);
                                                                                            $.fallr('hide');
                                                                                        }
                                                                                    }
																			    },
																	    		content : languagePack.image_choose_picture + '\
																	    				   <input id="fileupload" type="file" name="file" data-url="' + urlUpload + '&width=' + parentWidth + '&height=' + parentHeight + '">',
																			    icon    : 'plus',
																			    position: 'center',
																			    closeKey: true,
															    				closeOverlay: true
																			});

																			$('#fileupload').fileupload({
																		        dataType: 'json',
																		        done: function (e, data) {
                                                                            		if (data.result.success)
                                                                            		{
	                                                                                    var useWidth = (data.result.width <= $this.parent().width() ? data.result.width : $this.parent().width()),
	                                                                                        useHeight = (useWidth / (data.result.width / data.result.height)); // the height is calculated from the width and with the original proportions
	                                                                                        
																						$('#' + id).attr('src', 'images/' + data.result.fileName)
																							 .css({ width: useWidth, height: useHeight })
																							 .parent().css({ width: 'auto', height: 'auto' });
																						$.fallr('hide');
																						cropImage($('#' + id));

																						hasUnsavedChanges = true;
																					} else {

																						$.fallr('hide', {}, function() {
																							$.fallr('show', {
																							    buttons : {
																							        button1 : {text: 'Ok' }
																							    },
																					    		content : '<h5>An error occured:</h5>\
																					    				   <p>' + data.result.errorMessage + '</p>',
																							    icon    : 'plus',
																							    position: 'center',
																							    closeKey: true,
																			    				closeOverlay: true
																							});
																						})
																					}
																		        },
																		        error: function(jqXHR, textStatus, errorThrown) {
																					alert('An unexpected error occured.' + "\n\nError description:\n\"" + jqXHR.responseText + '\n\n' + errorThrown + "\"\n\nPlease try uploading the image again or contact WaveCMS support including the error description.");
																				}
																	    	});

														 					return false;
													 					}));

        // Make parent position relative and get left position of object
        $(this).parent().css({ position: 'relative'});

		var positionLeft = ($(this).position().left + $(this).width()) - 72;
		$(this).parent().append($('<span/>').addClass('menu-icon-container icon-cut ' + addExtraClass2).css({ left: positionLeft }).html(
																		 $('<img />').attr('src', urlDomBase + '/img/icons/iconCut.png')
																					 .css({ width: '26px', height: '26px' })
																		).on('click', function() {
																		 	$(this).parent().find('span.icon-edit, span.icon-cut').hide();
																			$img = $(this).parent().find('img[id^="imObjectImage_"]');
																			cropImage($img);

														 					return false;
													 					}));
	});

	$('div[id^="imTextObject_"]').each(function(key, val) {

		// Add tooltip on first text object
		var addExtraClass = '';
		if (key < 1)
		{
			addExtraClass = 'tour_moveAble tour_imTextObject';
		}
		//prevent malformed text from escaping the box
		$(this).css({overflow:"hidden"});
        // Make parent position relative and get left position of text object
		$(this).parent().css({ position: 'relative'});
		var positionLeft = ($(this).position().left + $(this).width()) - 36;

        $(this).parent().append(
                                $('<span />').addClass('menu-icon-container icon-edit ' + addExtraClass)
                                             .css({ left: positionLeft })
                                             .html(
                                                    $('<img />').attr('src', urlDomBase + '/img/icons/iconEditPencil.png')
                                                                .css({ width: '26px', height: '26px' })
                                                   )
                                             .on('click', function() {

																if ($('.isEditing').length)
																{
																	// Check if redactor has made any changes to imTextObject HTML.
																	if (textObjects[$('.isEditing').attr('id')] != md5($('.isEditing').text())) {
																		hasUnsavedChanges = true;
																	}
																	$('.isEditing').removeClass('isEditing');
																}

                                                                $(this).parent().find('span.icon-edit, span.icon-cut').hide();
                                                                $(this).parent().find('div[id^="imTextObject_"]').click();

                                                                return false;
                                                            }));
	});


	$('div[id^="imCellStyle_"] > div[id^="imObjectGallery_"]').each(function(key, val) {

		//
		// We need to determine wether we are looping over a classic slideshow or
		// a thumbnail gallery. If the parent container of the looped element containg a 
		// <script>-tag with the variable showbox_xxxx then we are loop over a thumbnail gallery.
		if (String($(this).parent().find('script').html()).indexOf('var showbox_') !== -1)
		{


            // Make parent position relative and get left position of object
            $(this).parent().css({ position: 'relative'});

			var positionLeft = ($(this).position().left + $(this).width()) - 36;
			$this = $(this);
			$(this).parent().append($('<span />').addClass('menu-icon-container icon-settings').css({ left: positionLeft }).html(
																	 $('<img />').attr('src', urlDomBase + '/img/icons/iconSettings.png')
																				 .css({ width: '26px', height: '26px' })
																	).on('click', function() {
																	 	$(this).parent().find('span.icon-settings').hide();

																	 	var matchContent 	= new RegExp('{[^<]+?]}').exec(String($(this).parent().find('script').html()));
																	 	var scriptTagObject = eval('(' + matchContent[0] + ')');

																	 	var scriptTagVariable = new RegExp('var showbox_[0-9]+').exec(String($(this).parent().find('script').html()));
																	 	scriptTagVariable = String(scriptTagVariable[0]).replace('var showbox_', '');

																  		var $thisParentDrop = $(this),
																  			parentWidth 	= $(this).parent().width();                                                              
																		var UUID = new Date().getTime();

																		var gapH    = 20;
																		var gapW 	= 200;
																		var boxH    = $(window).height() - gapH;     // bottom gap
																		var boxW    = $(window).width() - gapW * 2;  // left + right gap
																		$this = $(this);
																		//$parentEQ2 = $(this).parents().eq(2);
																		$parentEQ2 = $(this).parent();
                                                                        

																		$.fallr('show', {
																			icon 	: 'gear',
																			closeKey        : true,
																			closeOverlay    : true,
																		    content : templateThumbnails(scriptTagObject, $this.parent()),
																		    width   : boxW,
																		    height  : boxH,
																		    buttons : {
																		    	button1 : {text: 'Next step', onclick: function() {


																			  		content = { UUID: scriptTagVariable, images: [], settings: {
																			  						showbox: !!$('input[name="showbox"]').is(':checked'),
																			  						rowsPrFrame: (($('input[name="rowsInFrames"]').is(':checked')) ? $('input[name="rowsPrFrame"]').val() : false),
																			  						visibleThumbnails: 5,
																			  						showboxWidth:  $('input[name="showboxWidth"]').val(),
																			  						showboxHeight: $('input[name="showboxHeight"]').val(),
																			  						parentWidth: parentWidth
																			  				  }};

																		    		$('ul.thumbnail-strip li').each(function(key, val) {

																		    			if ($(this).attr('id') == 'slideshowLoaderImage')
																		    			{
																		    				// Skip image if its the slideshow upload icon.
																		    				return true;
																		    			}

																		    			var fileName = $(val).find('img').data('originalimage').substr($(val).find('img').data('originalimage').lastIndexOf('/') + 1);
																				    	
																				    	var img = new Image(),
																				    		imageWidth = null,
																				    		imageHeight = null;

																						img.onload = function() {
																						  imageWidth = this.width;
																						  imageHeight = this.height;
																						}
																						img.src = 'gallery/' + fileName;

				    																	var imageObject = { fileName: fileName, thumbFileName: $(val).find('img').attr('src').substr($(val).find('img').attr('src').lastIndexOf('/') + 1), width: parseInt(imageWidth, 10), height: parseInt(imageHeight, 10) };
																						content.images.push(imageObject);
																		    		});

																		    		content.settings.visibleThumbnails = $('select[name="visibleThumbnails"]').val();

																		    		insertThumbnails($this, null, content, $parentEQ2);
																		    		$.fallr('hide');
																		    	

																	    	}},
																		    button2 : {text: languagePack.fallr_cancel, onclick: function() {

																					$('a.ThumbnailgalleryDrag').remove();
																				    $Thumbnailgallery = makeThumbnailGalleryDraggable($('<a />').addClass('ThumbnailgalleryDrag').data('Thumbnailgallery', 1).css({ color: '#000000' }).html('<img src="img/icons/iconThumbnailsGallery.png" style="height: 16px; margin-right: 12px; margin-left: 7px;" />Thumbnail gallery'));
																					$('div.widget-options-container > div.insertThumbnailContainer').html($Thumbnailgallery);
																		    		
																					// Remove placeholder
																					GridController.removePlaceholders();

																		    		$.fallr('hide');
																		    		return false;

																		    	}}
																		    },
																		    afterHide: function() {
																		    	wrenchify();
                                                                                if (GridController.isPlaceholderVisible())
                                                                                {
                                                                                    GridController.removePlaceholders();
                                                                                }
																			}
                                                                        },
																	    function() {

																	    	$('span.thumbnail-remove').on('click', function() {
												        						$(this).parent().remove();
												        					});

																	    	$('#fallr-button-button1').attr('id', 'btnThumbnailNextStep');
																			$('#btnThumbnailNextStep').live('click', function() {
																			if ($('select[name="visibleThumbnails"]').val() == '--') {

																	                            alert('Please choose how many visible thumbnails are going to be showed before proceeding.');
																	                            return false;
	
																	                        } else {
																	    		$('#btnThumbnailNextStep').attr('id', 'fallr-button-button1').text('Save');

																			    $('ul.thumbnail-strip').sortable({
																					start: function() {
																					},
																					stop: function() {

																					},
																			        placeholder: {
																			 			element: function(currentItem) {
																			            	return $('<li />').css({
																			            		width: (parseInt(currentItem.width(), 10) - 10) + 'px',
																			            		height: (parseInt(currentItem.height(), 10) - 10) + 'px',
																			            		margin: '3px',
																			            		backgroundColor: 'gray',
																			            		opacity: '0.2',
																			            		border: '1px black dotted',
																			            		float: 'left'
																			            	})[0];
																				        },
																				        update: function(container, p) {
																				            return;
																				        }
																			        }
																			    });

																				$('#fileupload').fileupload({
																			        dataType: 'json',
																			        formData: [
																			        	{ name: 'UUID', value: UUID },
																			        	{ name: 'parentWidth', value: parentWidth },
																			        	{ name: 'visibleThumbnails', value: parseInt($('select[name="visibleThumbnails"]').val(), 10) },
																			        	{ name: 'showboxWidth', value: $('input[name="showboxWidth"]').val() },
					        															{ name: 'showboxHeight', value: $('input[name="showboxHeight"]').val() }
																			        ],
																			        add: function (e, data) {

																			        	// Add loader to notify the user that we are doing something in the background.
																			        	$('ul.thumbnail-strip').append('<li id="slideshowLoader" style="height: 50px; position: relative;"><img id="slideshowLoaderImage" src="' + urlDomBase + '/img/icons/iconPreloader.gif" style="position: absolute; height: 32px; width: 32px; top: 30px; left: 88px;" /></li>');

																			        	data.submit();
																			        },
																			        done: function (e, data) {
																			        	$('#slideshowLoader').remove();
					        	
																			        	// Calculate the images display size in the gallery strip.
																			        	if (data.result.width > data.result.height)
																			        	{
																			        		var maxWidth  = 130;
																			        		var maxHeight = Math.round( (130 / (data.result.width / data.result.height)) );
																			        	} else {
																			        		var maxHeight = 130;
																			        		var maxWidth  = Math.round( (130 / (data.result.height / data.result.width)) );
																			        	}

																			        	$thumbnail = $('<img />').attr('src', 'gallery/' + data.result.fileName)
																			        							 .attr('data-originalimage', data.result.fileName.replace('_thumb', ''))
																				        						 .data('width', data.result.width)
																				        						 .data('height', data.result.height)
																				        						 .css({ 'max-height': maxHeight + 'px', 'max-width': maxWidth + 'px' });

																				        $delete 	= $('<span />')
																				        					.on('click', function() {
																				        						$(this).parent().remove();
																				        					})
																				        					.html('X').css({ 'text-align': 'center', cursor: 'pointer', position: 'absolute', top: '5px', right: '5px', width: '20px', height: '20px', 'background-color': 'red' });

																			        	$('ul.thumbnail-strip').append(
																			        		$('<li />').css({ width: '130px', position: 'relative' }).html([$thumbnail, $delete])
																			        	);
																			        },
																			        error: function(jqXHR, textStatus, errorThrown) {
																			        	$('#slideshowLoader').remove();
																						alert('An unexpected error occured.' + "\n\nError description:\n\"" + jqXHR.responseText + '\n\n' + errorThrown + "\"\n\nPlease try uploading the image again or contact WaveCMS support including the error description.");
																					}
																		    	});


																				$('#thumbnailImageUpload').show();
																				$('#thumbnailSettings').hide();

																				return false;

																				}

																			});

																    	});
					}));

		} else {
            
            // Make parent position relative and get left position of object
            $(this).parent().css({ position: 'relative'});
            
			var positionLeft = ($(this).position().left + $(this).width()) - 36;
			$(this).parent().append($('<span />').addClass('menu-icon-container icon-settings').css({ left: positionLeft }).html(
																	 $('<img />').attr('src', urlDomBase + '/img/icons/iconSettings.png')
																				 .css({ width: '26px', height: '26px' })
																	).on('click', function() {
																	 	$(this).parent().find('span.icon-settings').hide();

																		var gapH    = 20;
																		var gapW 	= 200;
																		var boxH    = $(window).height() - gapH;     // bottom gap
																		var boxW    = $(window).width() - gapW * 2;  // left + right gap

																		var imObject = imageGalleries[$(this).parent().find('div:first').attr('id')];

																		$.fallr('show', {
																			icon 	: 'gear',
																			closeKey        : true,
	   																		closeOverlay    : true,
																		    content : templateClassicSlideshow('style', imObject),
																		    width   : boxW,
																		    height  : boxH,
																		    buttons : {
																		    	button1 : {text: languagePack.fallr_save, onclick: function() { 
																		    		imObject.controlBar.color = $('input[name="guiColor"]').val();
																		    		imObject.description.fontSize = '20pt';
																		    		updateClassicSlideshow(imObject); 
																		    		$.fallr('hide'); 
																		    	}},
																		    	button2 : {text: languagePack.fallr_cancel}
																		    },
																		    afterHide: function() {
																		    	wrenchify();
                                                                                if (GridController.isPlaceholderVisible())
                                                                                {
                                                                                    GridController.removePlaceholders();
                                                                                }
																			}},
																		    function() {

																				$('a[name="tab1"]').parent().on('click', function() {
																					$('ul.tabs > li.selected').removeClass('selected');
																					$(this).addClass('selected');

																					$('#tabs-1').show();
																					$('#tabs-2').hide();
																				});

																				$('a[name="tab2"]').parent().on('click', function() {
																					$('ul.tabs > li.selected').removeClass('selected');
																					$(this).addClass('selected');

																					$('#tabs-2').show();
																					$('#tabs-1').hide();
																				});

																				$('#colorSelector-gui').ColorPicker({
																					color: imObject.guiColor,
																					onShow: function (colpkr) {
																						$(colpkr).fadeIn(500);
																						return false;
																					},
																					onHide: function (colpkr) {
																						$(colpkr).fadeOut(500);
																						return false;
																					},
																					onChange: function (hsb, hex, rgb) {
																						$('#colorSelector-gui div').css('backgroundColor', '#' + hex);
																						$('input[name="guiColor"]').val('#' + hex);
																					}
																				});

																				$('#colorSelector-background').ColorPicker({
																					color: imObject.backgroundColor,
																					onShow: function (colpkr) {
																						$(colpkr).fadeIn(500);
																						return false;
																					},
																					onHide: function (colpkr) {
																						$(colpkr).fadeOut(500);
																						return false;
																					},
																					onChange: function (hsb, hex, rgb) {
																						$('#colorSelector-background div').css('backgroundColor', '#' + hex);
																						$('input[name="backgroundColor"]').val('#' + hex);
																					}
																				});

																				$('#fileupload').fileupload({
																			        dataType: 'json',
																			        add: function (e, data) {

																			        	// Add loader to notify the user that we are doing something in the background.
																			        	var lastChildHeight = $('div.film-strip > ul > li:last-child').height();
																			        	$('div.film-strip > ul').append('<li id="slideshowLoader" style="height: ' + lastChildHeight + 'px; background-color: red; position: relative;"><img src="' + urlDomBase + '/img/icons/iconPreloader.gif" style="position: absolute; height: 32px; top: ' + ((lastChildHeight - 32) / 2) + 'px;" /></li>');

																			        	data.submit();
																			        },
																			        done: function (e, data) {

																			        	// Remove loader
																			        	$('#slideshowLoader').remove();

																			        	image = {
																								'type': 'image',
																								'url': 'gallery/' + data.result.fileName,
																								'width': data.result.width,
																								'height': data.result.height,
																								'thumb': 'gallery/' + data.result.thumb,
																								'onclick': function () { return false; },
																								'autoplayTime': 5000,
																								'effect': 'zoom'
																								};

																			        	imObject.media.push(image);
																			        	updateClassicSlideshowDOM(imObject);

																			        	$('#tabs-2 > div.film-strip > ul').append($('<li/>').html($('<img/>').attr('src', 'gallery/' + data.result.thumb)));
																			        },
																			        error: function(jqXHR, textStatus, errorThrown) {
																			        	$('#slideshowLoader').remove();
																						alert('An unexpected error occured.' + "\n\nError description:\n\"" + jqXHR.responseText + '\n\n' + errorThrown + "\"\n\nPlease try uploading the image again or contact WaveCMS support including the error description.");
																					}
																			    });

																			    $('div.film-strip > ul').sortable({
																					start: function() {
																					},
																					stop: function() {
																						imObject = updateClassicSlideshowOrder(imObject, $('div.film-strip > ul > li'));
																					},
																			        placeholder: {
																			 			element: function(currentItem) {
																			            	return $('<li />').css({
																			            		width: (parseInt(currentItem.width(), 10) - 10) + 'px',
																			            		height: (parseInt(currentItem.height(), 10) - 10) + 'px',
																			            		margin: '3px',
																			            		backgroundColor: 'gray',
																			            		opacity: '0.2',
																			            		border: '1px black dotted',
																			            		float: 'left'
																			            	})[0];
																				        },
																				        update: function(container, p) {
																				            return;
																				        }
																			        }
																			    });
																		});

													 					return false;
												 					}));

		 }
	});
    
    // Adjust pagemenu height
    GridController.adjustPageMenuHeight();
    
}


// If "x5engine.utils.imCodeProtection" is activated, we deactivate it by overriding
// oncontextmenu behaviour.
document.oncontextmenu = function() {
	return true;
}

window.onbeforeunload = function() {
	if (hasUnsavedChanges)
	{
		return 'You have unsaved changes. Are you sure you want to leave this page?'; //'Du har ændringer, som ikke er gemt. Er du sikker på, at du vil forlade den nuværende side?';
	}
}

// Images dimensions are not known until $(window).load() is fired.
// hence we place wrenchify in this context and not after DOM-load.
$(window).load(function() {
	wrenchify();
	makeTextObjectsCSSButtonDroppable();
}).resize(function(e) {

	if ($(this).width() < 1400 && $('div.widget-container').hasClass('normal'))
	{
		widget('small');
	} else if ($(this).width() >= 1400 && $('div.widget-container').hasClass('small')) {
		widget('normal');
	}
});



function makeWOWSliderDraggable($element)
{
	$element.draggable({
		revert: 'invalid',
		cursor: 'move',
        containment: 'window',
        helper: 'clone',
		start: function(event, ui) {
            isDraggingSideMenuElement = ui;
		},
		drag: function(event, ui) {
			
		},
		stop: function(event, ui) {
            isDraggingSideMenuElement = false;
		},
		revert: function(droppableObj) {
			if (droppableObj === false)
			{

				if (GridController.isPlaceholderVisible())
				{
					GridController.removePlaceholders();
				}

				var WOWSliderPosition = { x: $('a.WOWSliderDrag').offset().left, y: $('a.WOWSliderDrag').offset().top};
				var WidgetPosition 	  = { x: $('div.widget-options-container').offset().left, y: $('div.widget-options-container').offset().top, width: $('div.widget-options-container').width(), height: $('div.widget-options-container').height() };

				$('a.WOWSliderDrag').remove();
                
                GridController.removePlaceholders();
                
				$WOWSlider = makeWOWSliderDraggable($('<a />').addClass('WOWSliderDrag').data('WOWSlider', 1).css({ color: '#000000' }).html('<img src="img/icons/iconSlideshow.png" style="height: 20px; margin-right: 6px; margin-left: 5px;" /> <span style="font-size: 12px;">WaveSlider</span>'));
				$('div.widget-options-container > div.wowsliderContainer').html($WOWSlider);
				}
			}
	});

	return $element;
}


function makeThumbnailGalleryDraggable($element)
{
	$element.draggable({
		revert: 'invalid',
		cursor: 'move',
        containment: 'window',
        helper: 'clone',
		start: function(event, ui) {
            isDraggingSideMenuElement = ui;
		},
		drag: function(event, ui) {
			
		},
		stop: function(event, ui) {
            isDraggingSideMenuElement = false;
		},
		revert: function(droppableObj) {
			if (droppableObj === false)
			{

				if (GridController.isPlaceholderVisible())
				{
					GridController.removePlaceholders();
				}

				var thumbnailGalleryPosition = { x: $('a.ThumbnailgalleryDrag').offset().left, y: $('a.ThumbnailgalleryDrag').offset().top};
				var WidgetPosition 	  		 = { x: $('div.widget-options-container').offset().left, y: $('div.widget-options-container').offset().top, width: $('div.widget-options-container').width(), height: $('div.widget-options-container').height() };

				$('a.ThumbnailgalleryDrag').remove();

 				GridController.removePlaceholders();

				$Thumbnailgallery = makeThumbnailGalleryDraggable($('<a />').addClass('ThumbnailgalleryDrag').data('Thumbnailgallery', 1).css({ color: '#000000' }).html('<img src="img/icons/iconThumbnailsGallery.png" style="height: 16px; margin-right: 12px; margin-left: 7px;" />Thumbnail gallery'));
				$Thumbnailgallery.appendTo($('div.widget-options-container > div:eq(1)'));
				}
			}
	});

	return $element;
}


function makeTextObjDraggable($element)
{
	$element.draggable({
		revert: 'invalid',
		cursor: 'move',
        containment: 'window',
        helper: 'clone',
		start: function(event, ui) {
            isDraggingSideMenuElement = ui;
		},
		drag: function(event, ui) {
			
		},
		stop: function(event, ui) {
            isDraggingSideMenuElement = false;
		},
		revert: function(droppableObj) {
			if (droppableObj === false)
			{

				if (GridController.isPlaceholderVisible())
				{
					GridController.removePlaceholders();
				}

				//var TextObjPosition = { x: $('a.TextObjDrag').offset().left, y: $('a.TextObjDrag').offset().top};
				//var WidgetPosition 	  = { x: $('div.widget-options-container').offset().left, y: $('div.widget-options-container').offset().top, width: $('div.widget-options-container').width(), height: $('div.widget-options-container').height() };

				$('a.TextObjDrag').remove();
                
                GridController.removePlaceholders();
                
                $TextObj = makeTextObjDraggable($('<a />').addClass('TextObjDrag')
                                                          .data('TextObj', 1)
                                                          .css({ color: '#000000' })
                                                          .html('<img src="img/icons/iconTextObj.png" style="height: 20px; margin-right: 6px; margin-left: 5px;" /> <span style="font-size: 12px;">Text</span>'));
				
				$('div.widget-options-container > div.insertTextContainer').html($TextObj);

			}
		}
	});

	return $element;
}



function makeImageObjDraggable($element)
{
	$element.draggable({
		revert: 'invalid',
		cursor: 'move',
        containment: 'window',
        helper: 'clone',
		start: function(event, ui) {
            isDraggingSideMenuElement = ui;
		},
		drag: function(event, ui) {
			
		},
		stop: function(event, ui) {
            isDraggingSideMenuElement = false;
		},
		revert: function(droppableObj) {
			if (droppableObj === false)
			{

				if (GridController.isPlaceholderVisible())
				{
					GridController.removePlaceholders();
				}

				var imagePosition  = { x: $('a.ImageObjDrag').offset().left, y: $('a.ImageObjDrag').offset().top};
				var WidgetPosition = { x: $('div.widget-options-container').offset().left, y: $('div.widget-options-container').offset().top, width: $('div.widget-options-container').width(), height: $('div.widget-options-container').height() };

				$('a.ImageObjDrag').remove();
				$ImageObject = makeImageObjDraggable($('<a />').addClass('ImageObjDrag').data('ImageObj', 1).css({ color: '#000000' }).html('<img src="img/icons/iconImageObj.png" style="height: 20px; margin-right: 6px; margin-left: 5px;" /> <span style="font-size: 12px;">Image</span>'));
				$ImageObject.appendTo($('div.insertImageContainer'));
				}
			}
	});

	return $element;
}


function makeHTMLObjDraggable($element)
{
	$element.draggable({
		revert: 'invalid',
		cursor: 'move',
        containment: 'window',
        helper: 'clone',
		start: function(event, ui) {
            isDraggingSideMenuElement = ui;
		},
		drag: function(event, ui) {
			
		},
		stop: function(event, ui) {
            isDraggingSideMenuElement = false;
		},
		revert: function(droppableObj) {
			if (droppableObj === false)
			{

				if (GridController.isPlaceholderVisible())
				{
					GridController.removePlaceholders();
				}

				var imagePosition  = { x: $('a.HTMLObjDrag').offset().left, y: $('a.HTMLObjDrag').offset().top};
				var WidgetPosition = { x: $('div.widget-options-container').offset().left, y: $('div.widget-options-container').offset().top, width: $('div.widget-options-container').width(), height: $('div.widget-options-container').height() };

				$('a.HTMLObjDrag').remove();
				$HTMLObject = makeHTMLObjDraggable($('<a />').addClass('HTMLObjDrag').data('HTMLObj', 1).css({ color: '#000000' }).html('<img src="img/icons/iconImageObj.png" style="height: 20px; margin-right: 6px; margin-left: 5px;" /> <span style="font-size: 12px;">HTML</span>'));
				$HTMLObject.appendTo($('div.insertHTMLContainer'));

				}
			}
	});

	return $element;
}


function makeDraggable($element, clone) {

return $element.draggable({
		revert: 'invalid',
		cursor: 'move',
        containment: 'window',
        helper: 'clone',
		start: function(event, ui) {
			// Append a clone of the current button.
			// If the current draggable object is placed correcty, we remove this clone.
			if (clone)
			{
				$(this).clone().css({ marginTop: '-30px'}).addClass('clone').appendTo($(this).parent());
			}
		},
		drag: function(event, ui) {
			
		},
		stop: function(event, ui) {
            isDraggingSideMenuElement = false;
		},
		revert: function(droppableObj) {
			if (clone)
			{
				// If false then no socket object drop occurred.
				if(droppableObj === false)
				{
					// Remove clone of the current button.
					$('a.clone').remove();

					// Revert the .myselector object by returning true
					return true;
				}
				else
				{
					// DroppableObj was returned, remove it's droppable attributes and make it draggable.
					makeDraggable($('a.clone').data('new', 1), true);

					// Return false so that the .myselector object does not revert
					return false;
				}
			} else {
				return true;
			}
		}
	});
}


/**
 * attachRedactor
 * 
 * Attach redactor to an element
 */
var dontClickBody = false;
function attachRedactor(element, event) {
    
	if ($('img[id^="imObjectImage_"]').parent().hasClass('ui-wrapper'))
	{
		$('img[id^="imObjectImage_"]').parent().parent().css({ backgroundColor: 'transparent', border: 0 });
	}

    if ( ! dontAttachRedactor) {

        ControlbarCloseSubmenus();

		// Remove text-inner div if present. This div will confuse redactor, and is of no use.
    	var $hasTextInner = (($(element).find('div.text-inner').length) ? $(element).find('div.text-inner') : false);
    	if ($hasTextInner) {
            $hasTextInner.each(function () {
                $(this)[0].outerHTML = $(this).html();
            });
    	}


        // Don't bubble element click to dom, since it will trigger body's hide redactor function
        if (typeof event !== 'undefined')
        {
            event.stopPropagation();
        }

        $(element).parent().find('span.icon-edit').hide();

        // While in text-edit mode, disable dragability
        $(GridController.wrapperID).sortable('disable');

        // Also if element already has is redactor enabled, we do nothing.
        if ($(element).hasClass('redactor_editor'))
        {
            return false;
        }

        $('div[id^="imTextObject_"], h1, h2, h3, h4, h5').destroyAllRedactors();

        toolbarTop  = ($(element).offset().top - 35);
        toolbarLeft = $(element).offset().left;

        if ((toolbarLeft + 373) > $(window).width())
        {
        	toolbarLeft = ($(window).width() - 380);
        }

        // Create our redactor external-toolbar div.
        $('#redactorToolbar').remove();
        $('body').append(
        	$('<div />').attr('id', 'redactorToolbar').css({ 
        		position: 'absolute', 
        		top: toolbarTop, 
        		left: toolbarLeft,
        		'z-index': 10000
        	}
        ));

        var buttons = ['formatting', '|', '|', 'bold', 'italic', 'deleted', '|',
                        'unorderedlist', 'outdent', 'indent', '|', 'alignment', '|',
                        'link'];


        // height of text plus padding saved in parent data for access when new padding calculations will be made
        var paddingBottom = parseInt($(element).parent().css("padding-bottom").replace("px", ""));      // current padding-bottom
        $(element).parent().data("total-height", ($(element).height()+paddingBottom));                  // current total height is stored in data-total-height
        
        $(element).redactor({
            plugins: ['fontcolor', 'fontfamily', 'fontsize', 'selectionmode'],
            focus: 'allButIE',
            toolbarExternal: '#redactorToolbar',
            buttons: buttons,
            cleanup: false,
            convertDivs: false,
            keyupCallback: function (e)
            {
                var key = e.which;

                // Adjust pagemenu height
                GridController.adjustPageMenuHeight();

                // Getting elementID for the text container
                var elementID = "#" + $(".redactor_box textarea").attr("name");

                // Enter clicked
                if (key == this.keyCode.ENTER && !e.shiftKey && !e.ctrlKey && !e.metaKey) {

                    var $current    = $(this.getBlock()),
                        $firstChild = $current.children(':first'),
                        $prevBlock  = $current.prev().children(':first');

                    // An empty CSS button has been created upon linebreak creation
					if ($firstChild.is('br')) $firstChild = $firstChild.next();
                    if ($firstChild.is('a.button') && $firstChild.html() === '' && $current.prev().children(':last').is('a.button')) {
                        $firstChild.remove();
                    }
                    
                    // An empty CSS button has been created before the current button upon linebreak creation
                    if ($prevBlock.is('br')) $prevBlock = $prevBlock.next();
                    if ($prevBlock.is('a.button') && $prevBlock.html() === '' && $current.children(':last').is('a.button')) {
                        $prevBlock.remove();
                    }
                    
                    // Remove small link toolbar
                    this.linkObserverTooltipClose(false);

                }

                // Calculating new bottom padding for element
                /*var newPaddingBottom = $(".redactor_box").parent().data("total-height") - $(".redactor_box").parent().height();
                if (paddingBottom && paddingBottom != 0 && newPaddingBottom > 0) {
                        $(".redactor_box").parent().css("padding-bottom", newPaddingBottom + "px");
                }*/

            },
            blurCallback: function (html) {

                dontClickBody = false;
                // Adjust pagemenu height
                GridController.adjustPageMenuHeight();

                // Calculating new bottom padding for element
                /*var newPaddingBottom = $(element).parent().data("total-height") - $(element).parent().height();
                if (paddingBottom && paddingBottom != 0 && newPaddingBottom > 0) {
                        $(element).parent().css("padding-bottom", newPaddingBottom + "px");
                }*/

                makeTextObjectsCSSButtonDroppable();

            },
            afterDestroyCallback: function () {

                adjustTextObjectCellHeight(element);
                adjustColsHeightInRow(element);

                // Adjust content wrapper height
                adjustPageHeight();

            }
        });

        $(element).addClass('isEditing');
        textObjects[$(element).attr('id')] = md5($(element).text());
        
        // Convert content of text object to proper markup
        TextObjectController.init(element);
        
        makeTextObjectsCSSButtonDroppable();
        
    }
}

$(document).ready(function() {

    $.fn.destroyAllRedactors = function() {
        this.each(function()
		{
			if (typeof $(this).data('redactor') != 'undefined')
			{
				$(this).redactor('destroy');
			}
		});
        
        // Remove toolbar
        if ($('#redactorToolbar').length) $('#redactorToolbar').remove();
        
        // Remove internal CMS isEditing attribute
        $('.isEditing').removeClass('isEditing');
        
    }; 

	$('.redactor_box').live('mousedown', function() {
		dontClickBody = true;
	}).live('mouseup', function() {
        setTimeout(function(){
            dontClickBody = false;
        }, 300);
	});

	// Hide login key
	$('#iconLoginKey').hide();

	// Fix anchors
	wavecms_anchors();

	// On editor load, we attach our editor widget.
	widget((($(window).width() >= 1400) ? 'normal' : 'small'));

    // Keep session alive
    refreshSn();

	$('body').on('click', function(e) {
        
        var targetElement = e.target || e.srcElement;
        
		if ($(targetElement).hasClass('jcrop-dragbar') || $(targetElement).hasClass('jcrop-handle') || $(targetElement).hasClass('jcrop-tracker')
			|| dontClickBody || $('#redactor_modal_overlay').is(':visible'))
		{
            // "return true" doesn't prevent bubbling (contrary to "return false").
            // This is on purpose because redactor also have body on click event
            // handlers that otherwise wouldn't be fired.
			return true;
		}

		$(GridController.wrapperID).sortable('enable');

		if ($(targetElement).parents().eq(1).is('ul.redactor_toolbar') || $(targetElement).parents('ul.redactor_toolbar').length || $(targetElement).parents('div.redactor_dropdown').length) {
			
			if ($(targetElement).parents('div.redactor_dropdown').length)
			{
				$('.redactor_act, .dropact').removeClass('redactor_act dropact');
				$(targetElement).parents('div.redactor_dropdown').hide();
			}
			return false;
		}

		if ($('.isEditing').length)
		{
			// Check if redactor has made any changes to imTextObject HTML.
			if (textObjects[$('.isEditing').attr('id')] != md5($('.isEditing').text())) {
				hasUnsavedChanges = true;
			}
			adjustPageHeight();
		}

		// Destroy redactor
		$('div[id^="imTextObject_"], h1, h2, h3, h4, h5').destroyAllRedactors();

		if ($('img[id^="imObjectImage_"]').parent().hasClass('ui-wrapper'))
		{
			$('img[id^="imObjectImage_"]').parent().parent().css({ backgroundColor: 'transparent', border: 0 });
		}

		$('img[id^="imObjectImage_"].ui-resizable').resizable('destroy');

		// Destroy jCrop elements if criterias match.
		if (typeof jCropAPI !== 'undefined' && 
            !$(targetElement).is('img') && 
            !$(targetElement).is('div.jcrop-tracker') && 
            !$(targetElement).is('div.jcrop-handle'))
		{
			jCropAPI.destroy();
            jCropObject.fileName = null;
			// Set editor id and state to null, since we have finished editing the current element.
			editor.id 	 = null;
			editor.state = null;
		}

		if (!$(targetElement).is('input[type="file"]')) {
			wrenchify();
		}

	});



	/*
	 * Widget icons/functionality
	 */
	/*$('span.widget-icon-trash').sortable({
    	connectWith: GridController.wrapperID + ' > div',
    	receive: function(event, ui) {
    		// Remove the dragged item from DOM
    		ui.item.remove();
    	}
	});*/

	$('span.widget-icon-save').live('click', function() {

		// Hide fallr overlay if present
		if ($('#fallr-overlay').length > 0) {
			 $('#fallr-overlay').css('display', 'none');
		}
		if ($('#fallr-wrapper').length > 0) { 
			 $('#fallr-wrapper').remove();
		}

		// Show login key
		$('#iconLoginKey').show();

		// Remove color pickers fields (if any)
		$('div.colorpicker').remove();

		// Make sure to remove both redactor and jCrop before save
		// since both of these will contain inline HTML.
		$('div[id^="imTextObject_"], h1, h2, h3, h4, h5').destroyAllRedactors();

        // Save tour before removal
        var tourShown = false,
            tourControls,
            tourParent;
        if ($('div#tourcontrols').length != 0) {
            tourShown = true;
            tourControls = $('div#tourcontrols')[0].outerHTML;
            tourParent = $('div#tourcontrols').parent();
            $('div#tourcontrols').remove();
        }

        // Adjust page menu height before saving
        GridController.adjustPageMenuHeight();

        // Clean grid data
        GridController.cleanGridData();

		if (typeof jCropAPI !== 'undefined')
		{
			jCropAPI.destroy();
		}

		var onSuccess = function(response) {
			if (typeof response.success !== 'undefined')
			{
				hasUnsavedChanges = false;

				// Add edit icons again.
				wrenchify();

				// Hide login key
				$('#iconLoginKey').hide();
                
                // Identify grid again
                GridController.init();

                                // Show tour
                                if (tourShown == true) {
                                    $(tourParent).prepend(tourControls);
                                }

				$.fallr('show', {
							width: '400px',
						    buttons : {
						    	button1:{ text: languagePack.fallr_ok }
						    },
				    		content : languagePack.save_ok,
						    icon    : 'info',
						    position: 'center',
						    closeKey: true,
							closeOverlay: true
						});

			} else {
				$.fallr('show', {
							width: '400px',
						    buttons : {
						    	button1:{ text: languagePack.fallr_ok }
						    },
				    		content : languagePack.save_error,
						    icon    : 'info',
						    position: 'center',
						    closeKey: true,
							closeOverlay: true
						});
			}
		}

		// Clone body, remove our internal CMS-scripts and various other
		// which shall not be saved to the original X5-document.
		var $bodyContent = $('body').clone();
			$bodyContent.find('script[data-cms="true"], link[data-cms="true"], style[data-cms="true"], div[data-cms="true"], span.menu-icon-container').remove();
			$bodyContent.find('script[type="text/xml"]').attr('type', '');
			$bodyContent.find('div.WOWSliderRemoveBeforeSave, div.ws_effect').remove();

		// Remove all image galleries from DOM too.
		// This is needed since the inline javascript/script-elements generates the
		// galleries DOM-nodes on DOM load.
		for (imageGallery in imageGalleries)
		{
			$bodyContent.find(imageGalleries[imageGallery].target).html('');
		}

		// URL, data, success function, HTTP method
		queryBackend(urlDomSave, { file: file, DOM: B64.encode($bodyContent.html()) }, onSuccess, 'POST');
    });


    $('span.widget-icon-plus').live('click', function() {

    	if ($('div.advanced-settings').is(':visible'))
    	{
    		$('div.advanced-settings').removeClass('widget-selected');
    		$('div.advanced-settings').hide();    		
    	}


    	if ($('div.widget-options').is(':visible'))
    	{
    		$(this).removeClass('widget-selected');
    		$('div.widget-options').hide();
    	} else {
			$(this).addClass('widget-selected');

            $('div[id^="imTextObject_"], h1, h2, h3, h4, h5').destroyAllRedactors();
            
            wrenchify();

    		$Thumbnailgallery = $('<div />').css({ marginBottom: '3px', height: '25px', float: 'left', width: '100%' }).addClass('insertThumbnailContainer').html([makeThumbnailGalleryDraggable($('<a />').addClass('ThumbnailgalleryDrag')
    																					.data('Thumbnailgallery', 1)
    																					.css({ color: '#000000' })
    																					.html('<img src="img/icons/iconThumbnailsGallery.png" style="height: 16px; margin-right: 12px; margin-left: 7px;" />' + languagePack.menu_add_thumbnail_gallery)
    			)]);
	
    		$insertTextObject = $('<div />').css({ marginBottom: '3px', height: '25px', float: 'left', width: '100%' }).addClass('insertTextContainer').html(
                    [                           
                        makeTextObjDraggable($('<a />').addClass('TextObjDrag') 
                                                       .data('TextObj', 1)
                                                       .css({ color: '#000000' })
                                                       .html('<img src="img/icons/iconTextObj.png" style="height: 20px; margin-right: 6px; margin-left: 5px;" /> <span style="font-size: 12px;">' + languagePack.menu_add_text + '</span>')
                        )
                    ]);
                    
    		$insertImage = $('<div />').css({ marginBottom: '3px', height: '25px', float: 'left', width: '100%' }).addClass('insertImageContainer').html(
                    [
                        makeImageObjDraggable($('<a />').addClass('ImageObjDrag')
                                                       .data('ImageObj', 1)
                                                       .css({ color: '#000000' })
                                                       .html('<img src="img/icons/iconImageObj.png" style="height: 20px; margin-right: 6px; margin-left: 5px;" /> <span style="font-size: 12px;">' + languagePack.menu_add_image + '</span>')
                        )
                    ]);
  

    		$insertHTML = $('<div />').css({ marginBottom: '3px', height: '25px', float: 'left', width: '100%' }).addClass('insertHTMLContainer').html(
                    [
                        makeHTMLObjDraggable($('<a />').addClass('HTMLObjDrag')
                                                       .data('HTMLObj', 1)
                                                       .css({ color: '#000000' })
                                                       .html('<img src="img/icons/iconHTMLObj.png" style="height: 20px; margin-right: 6px; margin-left: 5px;" /> <span style="font-size: 12px;">' + languagePack.menu_add_html + '</span>')
                        )
                    ]);

    		$WOWSlider = $('<div />').css({ marginBottom: '20px', height: '25px', float: 'left', width: '100%' }).addClass('wowsliderContainer').html(
                                                                                                                    [
                                                                                                                        makeWOWSliderDraggable($('<a />').addClass('WOWSliderDrag')
                                                                                                                                                         .data('WOWSlider', 1)
                                                                                                                                                         .css({ color: '#000000' })
                                                                                                                                                         .html('<img src="img/icons/iconSlideshow.png" style="height: 20px; margin-right: 6px; margin-left: 5px;" /> <span style="font-size: 12px;">' + languagePack.menu_add_wowslider + '</span>')
                                                                                                                        )
                                                                                                                    ]);





    		var buttonColors = ['white', 'grey', 'pink', 'orange', 'green', 'blue', 'purple', 'darkblue', 'black'], // , 'teal'
    			$buttons = [$('<h5 />').text(languagePack.menu_add_btn_header)],
    			row = 0;

    		for (i = 0; i < buttonColors.length; i++)
    		{
    			$buttons.push(
    				$('<div />').addClass('button-container' + (((i - 1) % 3 == 0) ? ' middle' : '')).html(
	    				makeDraggable($('<a />').addClass('button ' + buttonColors[i])
	    						  .data('new', 1)
	    						  .text(languagePack.menu_add_button), true)
	    			)
				);
    		}                       

            // removes class "advanced settings" if this class is present
    		$('div.widget-options').removeClass('advanced-settings').html($('<div />')
    			.addClass('widget-options-container')
    			.removeClass('advanced-settings')
    			.html(
    				$('<h5 />').text(languagePack.menu_add_header).css({ marginBottom: '10px' })
    			)
    			.append($insertTextObject)
    			.append($Thumbnailgallery)
    			.append($insertImage)
    			.append($insertHTML)
    			.append($WOWSlider)
    			.append($buttons))
    			.show();
    		
    		if ($(this).parent().hasClass("small")) {
	    		$('div.widget-options').css("left", "60px");
    		}
    	}
    });

	$('span.widget-icon-wheel').live('click', function() {

    	if ($('div.widget-wheel').is(':visible'))
    	{
    		$('div.widget-wheel').removeClass('widget-selected');
    		$('div.widget-wheel').hide();    		
    	}

    	if ($('div.advanced-settings').is(':visible'))
    	{
    		$('div.advanced-settings').hide();
    	} else {
            
			$(this).addClass('widget-selected');
            
            $('div[id^="imTextObject_"], h1, h2, h3, h4, h5').destroyAllRedactors();
            
            wrenchify();
            
			var common_css = { marginBottom: '20px', height: '25px', float: 'left', width: '100%' ,cursor:'pointer'};
			var fallrText = languagePack.new_x5_layout_info;

			fallrText+="<br><br><label><input type=checkbox id=deletePrevBackups> "+languagePack.update_delete_prev_backup+"</label>";
			fallrText+="<br><label><input type=checkbox id=skipBackup> "+languagePack.updatecenter_skip_backup+"</label>";
    		$updateDesign = [$('<div />').css(common_css).html($('<a>').css({width:'85%', position: 'relative', textAlign: 'center'}).addClass('button white').text(languagePack.menu_advanced_settings_import_new_x5).click(
    																											function(){
    																													$.fallr('show', {
                                                                                                                            buttons : {
                                                                                                                                button1:{text: languagePack.fallr_continue,
                                                                                                                                	danger:true,
                                                                                                                                	onclick:function(){
                                                                                                                                		runUpdateDesignServer(
                                                                                                                                			$('#skipBackup').is(':checked'),
                                                                                                                                			$('#deletePrevBackups').is(':checked')
                                                                                                                                			);}
                                                                                                                                	},
                                                                                                                                button2 : {text: languagePack.fallr_cancel, onclick: function() { $.fallr('hide'); }}
                                                                                                                            },
                                                                                                                            content : fallrText,
                                                                                                                            icon    : 'gear',
                                                                                                                            position: 'center',
                                                                                                                            closeKey: true,
                                                                                                                            closeOverlay: true
                                                                                                                        });
    																												}
    																											)
    														),
							$('<div />').css(common_css).html($('<a>').css({width:'85%', position: 'relative', textAlign: 'center'}).addClass('button white').text(languagePack.menu_advanced_settings_change_meta).on('click', function() {
								$.fallr('show', {
										width: '500px',
										height: '400px',
									    buttons : {
									    	button1:{text: languagePack.fallr_save, onclick:function() { 
									    		$.post(urlDomBase + 'index.php?c=file&m=postMetaTags&page=' + file, { keywords: $('#textareaKeywords').val() }, function(data) {
									    			if (data.success)
									    			{
									    				$.fallr('hide');
									    			}
									    		});
									    	}},
									        button2 : {text: languagePack.fallr_cancel, onclick: function() { $.fallr('hide'); }}
									    },
							    		content : languagePack.meta_loading,
									    icon    : 'gear',
									    position: 'center',
									    closeKey: true,
					    				closeOverlay: true
									}, function() {

										$.getJSON(urlDomBase + 'index.php?c=file&m=getMetaTags&page=' + file + '&noCache=' + new Date().getTime(), function(data) {
											$('#fallr').html([
												$('<h5>').css({ 'font-size': '10pt' }).text(languagePack.meta_enter),
												$('<textarea />').attr('id', 'textareaKeywords').css({ width: '350px', height: '200px' }).text(data.keywords)
											]);
										});

										
									});
								}
							)),
							$('<div />').css(common_css).html($('<a>').css({width:'85%', position: 'relative', textAlign: 'center'}).addClass('button white').text(languagePack.menu_advanced_settings_change_language).on('click', function() {

								$.fallr('show', {
											width: '500px',
										    buttons : {
										    	button1 : {text: languagePack.fallr_save, onclick: function() {      

										    		$.post(urlDomBase + 'index.php/file/languageupdate', { language: $('#selectLanguage').val() }, function(data) {
														if (JSON.parse(data).success)
														{
															location.reload();
														}
													});

										    	}},
										        button2 : {text: languagePack.fallr_cancel, onclick: function() { 
										        	$.fallr('hide'); 
										        }}
										    },
											content : '<h5>' + languagePack.language_header + '</h5>\
													   <p><i>' + languagePack.language_caution_notice + '</i></p>\
													   <select style="width: 250px;" id="selectLanguage">\
													   </select>',
										    icon    : 'gear',
										    position: 'center',
										    closeKey: true,
											closeOverlay: true
										}, function() {
											$.getJSON(urlDomBase + 'index.php/file/languages', function(data) {

												var options = []; 
												for (i = 0; i < data.languages.length; i++)
												{
													if (data.languages[i] == data.current)
													{
														options.push($('<option />').attr('value', data.languages[i]).attr('selected', true).html(String(data.languages[i]).ucfirst()));
													} else {
														options.push($('<option />').attr('value', data.languages[i]).html(String(data.languages[i]).ucfirst()));
													}
												}

												$('#selectLanguage').html(options);

											});
										});
							})),
							/*
							$('<div />').css(common_css)
										.html($('<a>')
										.css({width:'85%', position: 'relative', textAlign: 'center'})
										.addClass('button white')
										.text( (($.cookie('grid_state') == 0 || $.cookie('grid_state') === 'undefined') ? languagePack.menu_advanced_settings_grid_show : languagePack.menu_advanced_settings_grid_hide) )
										.on('click', function() {
											if ($.cookie('grid_state') == 0 || $.cookie('grid_state') === 'undefined')
											{
												$.cookie('grid_state', 1, { expires: 99 });
												GridController.generateGridRulers();		
												$(this).text(languagePack.menu_advanced_settings_grid_hide);									
											} else {
												$.cookie('grid_state', 0, { expires: 99 });
												GridController.removeGrid();
												$(this).text(languagePack.menu_advanced_settings_grid_show);									
											}
											
											return false;
										}))
							*/

    		  ];
    		
    		$('div.widget-options').addClass('advanced-settings').html($('<div />').addClass('widget-options-container').addClass('advanced-settings').html($('<h5 />').text(languagePack.menu_advanced_settings_header).css({ marginBottom: '10px' })).append($updateDesign)).show();
    		
    		if ($(this).parent().hasClass("small")) {
	    		$('div.widget-options').css("left", "60px");
    		}
    	}
    });

	function runUpdateDesignServer(skipBackup,deletePrevBackups){
        
		if (!deletePrevBackups && skipBackup) {
			var fallrContent = languagePack.new_x5_layout_please_wait_updating_design;
		} else {
			var fallrContent = languagePack.new_x5_layout_please_wait;
		}
		
        $.fallr('hide', function () {

            $.fallr('show', {
                buttons : {
                    button1 : {text: 'Please wait ..', onclick: function() {  }}
                },
                content : fallrContent,
                icon    : 'gear',
                position: 'center'
            });
            
        });
        //if deletePrev backups is set we'll delete the old backups first.
        //then we'll run runBackup (if skipBackup is not set)
        if (deletePrevBackups) {
        	$.post('index.php?c=updatedesign&m=delete_prev_backups',function(data){
                var isJson = IsJsonString(data);
                if (isJson) {
                    var jsonData = $.parseJSON(data);
                }
                if (isJson && jsonData.status=='success') {
                    if (skipBackup) {
                        runUpdate();
                    }else{
                        runBackup();
                    }
                } else{
                    alert(languagePack.update_delete_prev_backup_error);
                    $.fallr('hide');
                }

        	});
        } else {
        	if (skipBackup) {
        		runUpdate();
        	}else{
                //backup before updating
                runBackup();
                //on success it'll run 'runUpdate'
        	}
        
    	}


		
	}

	function runBackup(){
        	//backup before updating
        $.post('index.php?c=updatedesign&m=backup_before_update',function(data){
            var isJson = IsJsonString(data);
            if (isJson) {
                var jsonData = $.parseJSON(data);
            }
        	if (isJson && jsonData.status=='success') {
        		
        		$.fallr('hide', function () {

			            $.fallr('show', {
			                buttons : {
			                    button1 : {text: 'Please wait ..', onclick: function() {  }}
			                },
			                content : languagePack.new_x5_layout_please_wait_backup_complete,
			                icon    : 'gear',
			                position: 'center'
			            });
			            
			        });
        		runUpdate();
        		
        	} else {
        		var content = languagePack.updatecenter_backup_failed;
        		if (data && data.indexOf("Maximum execution time")!=-1) {
        			content = languagePack.update_backup_failed_time;
        		};
        		$.fallr('hide', function () {

                    $.fallr('show', {
                        buttons : {
                            button1 : {text: 'Dismiss', onclick: function() { $.fallr('hide'); }}
                        },
                        content : content,
                        icon    : 'gear',
                        position: 'center',
                        closeKey: true,
                        closeOverlay: true
                    });
                
                });
        	//if we can't backup we'll return, to prevent update from going ahead
        	return false;
        	}
        }).fail(function(){alert(languagePack.new_x5_layout_server_failed); });;
    }

    function runUpdate(){
    	$.post('index.php?c=updatedesign&m=update',function(data){
			var jsonData = null ;
			try{
				jsonData = JSON.parse(data);

			} catch (e){
 				alert(languagePack.new_x5_layout_unknown_response);
 				$.fallr('hide');
 				return false;
			}
			

			if (jsonData.status=='success') {
                
				$.fallr('hide', function () {

                    $.fallr('show', {
                        buttons : {
                            button1 : {text: 'Dismiss', onclick: function() { $.fallr('hide'); }}
                        },
                        content : languagePack.new_x5_layout_update_success,
                        icon    : 'gear',
                        position: 'center',
                        width   : '500px',
                        closeKey: true,
                        closeOverlay: true
                    });
                
                });
                
				
			} else if(jsonData!=null){
                
				$.fallr('hide', function () {

                    $.fallr('show', {
                        buttons : {
                            button1 : {text: 'Dismiss', onclick: function() { $.fallr('hide'); }}
                        },
                        content : languagePack.new_x5_layout_update_error + jsonData.message,
                        icon    : 'gear',
                        position: 'center',
                        closeKey: true,
                        closeOverlay: true
                    });
                
                });

			} else {
				alert(languagePack.new_x5_layout_unknown_response);
			}
		})
		.fail(function(){alert(languagePack.new_x5_layout_server_failed); });

    }

    $('span.widget-icon-logout').live('click', function() {

    	var url = window.location.pathname,
    		filename = url.substring(url.lastIndexOf('/') + 1);

    	top.window.location.assign(urlDomBase + 'index.php?c=cms&m=logout');
    });

	
    //
    // Attach redactor on element click, if it is text-editable.
    // 
    // All the DOM elements in the selector present on page load 
    // will be affected
    //
	$('div[id^="imTextObject_"], h1, h2, h3, h4, h5').on('click', function(e) { attachRedactor(this, e); } );


	$('img[id^="imObjectImage_"]').live('click', function(e) {

		e.stopPropagation();
		$this = $(this);

		if (!$(this).attr('data-originalheight'))
		{
			$(this).attr('data-originalheight', $(this).height());
		}
                
		// While in picture-edit mode, disable dragability and hide icons.
		$(GridController.wrapperID).sortable('disable');
		$(this).parent().find('span.icon-edit, span.icon-cut').hide();
		if (!$(this).parent().hasClass('ui-wrapper'))
		{
			$(this).css({ opacity: 1 });
			if ($(this).attr('data-originalheight') > $(this).height())
			{
				$(this).parent().css({ height: $(this).attr('data-originalheight'), backgroundColor: '#c0c0c0', border: '1px dashed white' });
			}

			$this = $(this);
			$currentResizedPicture = $(this);

			$(this).resizable({
				aspectRatio: true,
				containment: $this.parent(),
				resize: function(event, ui) {
					
				},
				stop: function(event, ui) {

					$currentResizedPicture.parent().parent().css({height: $this.css('height'), backgroundColor: 'transparent', border: 0});

					$('img[id^="imObjectImage_"].ui-resizable').resizable('destroy');
					wrenchify();

					onSuccess = function(response) {
						if (typeof response.success !== 'undefined')
						{
							$currentResizedPicture.attr('src', 'images/' + response.data.fileName)
								 .css({ width: response.data.width, height: response.data.height });

							wrenchify();

							hasUnsavedChanges = true;
						}
					}

					//URL, data, success function, HTTP method
					queryBackend(urlDomPictureResize, {fileName: $currentResizedPicture.attr('src'), width: $currentResizedPicture.width(), height: $currentResizedPicture.height()}, onSuccess, 'POST');
				}
			});
		}

	});

	$('div.jcrop-tracker').live('dblclick', function(e) {

		// Set editor id and state to null, since we have finished editing the current element.
		editor.id 	 = null;
		editor.state = null;

		onSuccess = function(response) {
			if (typeof response.success !== 'undefined')
			{
				$('#' + jCropObject.id)
									 .attr('src', 'images/' + response.data.fileName)
									 .attr('data-originalheight', response.data.height)
									 .css({ width: response.data.width, height: response.data.height }).parent().css({ height: response.data.height });

				jCropAPI.destroy();
				wrenchify();

				hasUnsavedChanges = true;
			}
		}

		//URL, data, success function, HTTP method
		queryBackend(urlDomPictureCut, jCropObject, onSuccess, 'POST');
	});

	//
	// On hover we show an border on draggable objects.
	//

    //$('div.ui-sortable > div').on('mouseover', function() {
    $('div.ui-sortable img[id^="imObjectImage_"], div.ui-sortable div[id^="imTextObject_"], div.ui-sortable div[id^="imObjectGallery_"]').hover(function() {
        
    	if (jCropObject.fileName !==  null)
    	{
    		return false;
    	}

    	// Don't hover any elements while we are dragging one
    	if (isDragging)
    	{
    		return true;
    	}

    	if ($('div.hover-border.top, div.hover-border.right, div.hover-border.bottom, div.hover-border.left').is(":visible")) {
	    	return true;
    	}

    	//var dimensionAndOffset = { offset: $(this).find('img[id^="imObjectImage_"], div[id^="imTextObject_"], div[id^="imObjectGallery_"]').offset(), dimensions: [$(this).find('img[id^="imObjectImage_"], div[id^="imTextObject_"], div[id^="imObjectGallery_"]').width(), $(this).find('img[id^="imObjectImage_"], div[id^="imTextObject_"], div[id^="imObjectGallery_"]').height()] }
    	var dimensionAndOffset = { offset: $(this).offset(), dimensions: [$(this).width(), $(this).height()] }

    	if (!$('div.hover-border.top').length)
    	{
	    	$('html').append([
				$('<div/>').addClass('hover-border top'),
				$('<div/>').addClass('hover-border right'),
				$('<div/>').addClass('hover-border bottom'),
				$('<div/>').addClass('hover-border left')
	    	]);
	   	}

	   	$('div.hover-border.top').css({
	   		top: (dimensionAndOffset.offset.top - 3),
	   		left: dimensionAndOffset.offset.left,
	   		width: (dimensionAndOffset.dimensions[0] + 4),
	   		height: '1px'
	   	}).show();

	   	$('div.hover-border.right').css({
	   		top: (dimensionAndOffset.offset.top - 3),
	   		left: (dimensionAndOffset.offset.left + dimensionAndOffset.dimensions[0] + 4),
	   		width: '1px',
	   		height: (dimensionAndOffset.dimensions[1] + 8)
	   	}).show();

	   	$('div.hover-border.bottom').css({
	   		top: (dimensionAndOffset.offset.top + dimensionAndOffset.dimensions[1] + 4),
	   		left: dimensionAndOffset.offset.left - 1,
	   		width: (dimensionAndOffset.dimensions[0] + 4),
	   		height: '1px'
	   	}).show();

	   	$('div.hover-border.left').css({
	   		top: (dimensionAndOffset.offset.top - 3),
	   		left: (dimensionAndOffset.offset.left - 3),
	   		width: '1px',
	   		height: (dimensionAndOffset.dimensions[1] + 8)
	   	}).show();

	//}).on('mouseout', function() {
	},function(){
	   	cellBorderHide();
	});

	$(GridController.wrapperID).droppable({
		accept: 'a.WOWSliderDrag, a.ThumbnailgalleryDrag, a.ImageObjDrag, a.HTMLObjDrag, a.TextObjDrag',
	  	drop: function(event, ui) {

	  		if (!GridController.isPlaceholderVisible()) {
	  			return false;
	  		}

	  		$('body').css({ cursor: 'default' });

	  		var $thisParentDrop = $(this),
	  			parentWidth 	= GridController.pageGrid.width;

			if ($(ui.draggable).hasClass('HTMLObjDrag'))
			{

				$.fallr('show', {
					width: '960px',
					afterHide : function() {
						if (GridController.isPlaceholderVisible())
						{
							GridController.removePlaceholders();
						}
					},
				    buttons : {
				    	button1 : {text: languagePack.fallr_save, onclick: function() {
							var UUID = new Date().getTime();
									
							// Check if manual height has been forced.
							var forceHeight = null;
							if (!$('input[name="forceHeight"]').is(':disabled') && !isNaN($('input[name="forceHeight"]').val()))
							{
								forceHeight = $('input[name="forceHeight"]').val();
							}


							$HTMLContent = $('<div id="imHTMLObject_' + UUID + '" class="imHTMLObject"></div>');
							$HTMLContent[0].innerHTML = $('#HTMLObjectTextarea').val();

							$.each($HTMLContent.find('script'), function(key, value) {
								var $clone = $(this).clone().attr('type', 'text/xml');
								$clone.insertAfter($(this));
							});

							ui.draggable.remove();
						    GridController.convertPlaceholderToNormal();
						    GridController.getNewCell().append($HTMLContent[0].outerHTML);
						    GridController.markNewCellAsOld();
                            
                            // Set height on HTML object if forceHeight is set
                            forceHeight != null && $HTMLContent.css('height', forceHeight);
                            
							wrenchify();

							$HTMLObject = makeHTMLObjDraggable(
								$('<a />').addClass('HTMLObjDrag')
										  .data('HTMLObj', 1)
										  .css({ color: '#000000' })
										  .html('<img src="img/icons/iconHTMLObj.png" style="height: 20px; margin-right: 6px; margin-left: 5px;" /> <span style="font-size: 12px;">HTML</span>')
								);
                            
							$('div.widget-options-container > div.insertHTMLContainer').html($HTMLObject);

                                                        
							$.fallr('hide');
				    	}},
				        button2 : {text: languagePack.fallr_cancel, onclick: function() { 
				        	
				        	// Remove placeholder
							GridController.removePlaceholders();

				        	wrenchify(); 
				        	$.fallr('hide'); 
				        }}
				    },
		    		content : '<input type="checkbox" name="manualHeight" onclick="showboxFieldsStateChange(' + "'manualHeight', ['forceHeight']" + ');" />' + languagePack.html_manual_height + '\
		    				   <input type="text" name="forceHeight" disabled="disabled" style="background-color: #cac9c9;" />\
		    				   ' + languagePack.html_enter_markup + '\
		    				   <textarea id="HTMLObjectTextarea" style="height: 400px;"></textarea>',
				    icon    : 'plus',
				    position: 'center',
				    closeKey: true,
					closeOverlay: true
				}, function() {

                                        hasUnsavedChanges = true;
					$('#HTMLObjectTextarea').focus().keydown(function(e) {
						var $this, 
							end, 
							start;

						if (e.keyCode === 9) 
						{
						    start = this.selectionStart;
						    end = this.selectionEnd;
						    $this = $(this);
						    $this.val($this.val().substring(0, start) + "\t" + $this.val().substring(end));
						    this.selectionStart = this.selectionEnd = start + 1;
						    return false;
						}
					});

				});

			} else if ($(ui.draggable).hasClass('ImageObjDrag'))
	  		{
                var parentWidthCell = GridController.getPlaceholderCellElement().css('width'),
                    parentWidthRow  = GridController.getPlaceholderElement().css('width'),
                    parentWidth = ( parentWidthCell || parentWidthRow ).replace('px', '');

				$.fallr('show', {
					afterHide : function() {
						if (GridController.isPlaceholderVisible())
						{
							GridController.removePlaceholders();
						}
					},
				    buttons : {
				        button2 : {text: languagePack.fallr_cancel, onclick: function() { 
				        	
							// Remove placeholder
							GridController.removePlaceholders();

				        	wrenchify(true); 
				        	$.fallr('hide'); 

				        }}
				    },
		    		content : languagePack.image_choose_picture + '\
		    				   <input id="fileupload" type="file" name="file" data-url="' + urlUpload + '&width=' + parentWidth + '&height=600">',
				    icon    : 'plus',
				    position: 'center',
				    closeKey: true,
					closeOverlay: true
				}, function() {

					$('#fileupload').fileupload({
				        dataType: 'json',
				        done: function (e, data) {
                                            
							var UUID = new Date().getTime();
							
				  			var $image = '<div id="imCellStyle_' + UUID + '" style="position: relative; height: ' + data.result.height + 'px;">\
											<img id="imObjectImage_' + UUID + '" src="images/' + data.result.fileName + '" title="" alt="" data-originalheight="' + data.result.height + '" />\
										 </div>';

							ui.draggable.remove();
						    GridController.convertPlaceholderToNormal();
						    GridController.getNewCell().append($image);
						    GridController.markNewCellAsOld();

							wrenchify();
							cropImage($('#imObjectImage_' + UUID));


							$imageObject = makeImageObjDraggable($('<a />').addClass('ImageObjDrag')
                                                       .data('ImageObj', 1)
                                                       .css({ color: '#000000' })
                                                       .html('<img src="img/icons/iconImageObj.png" style="height: 20px; margin-right: 6px; margin-left: 5px;" /> <span style="font-size: 12px;">Image</span>')
                                             );

							$('div.widget-options-container > div.insertImageContainer').html($imageObject);

							$.fallr('hide');

							hasUnsavedChanges = true;
				        },
				        error: function(jqXHR, textStatus, errorThrown) {
							alert('An unexpected error occured.' + "\n\nError description:\n\"" + jqXHR.responseText + '\n\n' + errorThrown + "\"\n\nPlease try uploading the image again or contact WaveCMS support including the error description.");
						}
			    	});

				});

			} 
			else if ($(ui.draggable).hasClass('ThumbnailgalleryDrag'))
			{

		  		var $thisParentDrop = $(this),
		  			parentWidth 	= 780; //hardcoded until fix from KJI

				var UUID = new Date().getTime();

				var gapH    = 20;
				var gapW 	= 200;
				var boxH    = $(window).height() - gapH;     // bottom gap
				var boxW    = $(window).width() - gapW * 2;  // left + right gap
				$this = $(this);

				$.fallr('show', {
					icon 	: 'gear',
					closeKey        : true,
					closeOverlay    : true,
				    content : templateThumbnails(),
				    width   : boxW,
				    height  : boxH,
					afterHide : function() {
				    	wrenchify();
						if (GridController.isPlaceholderVisible())
						{
							GridController.removePlaceholders();
						}
					},
				    buttons : {
				    	button1 : {text: 'Next step', onclick: function() {


					  		content = { UUID: UUID, images: [], settings: {
					  						visibleThumbnails: 5,
					  						rowsPrFrame: (($('input[name="rowsInFrames"]').is(':checked')) ? $('input[name="rowsPrFrame"]').val() : false),
					  						showbox: !!$('input[name="showbox"]').is(':checked'),
					  						showboxWidth:  $('input[name="showboxWidth"]').val(),
					  						showboxHeight: $('input[name="showboxHeight"]').val(),
					  						parentWidth: parentWidth
					  				  }};

				    		$('ul.thumbnail-strip li').each(function(key, val) {

				    			if ($(this).attr('id') == 'slideshowLoaderImage')
				    			{
				    				// Skip image if its the slideshow upload icon.
				    				return true;
				    			}

				    			var imageObject = { fileName: $(val).find('img').data('originalimage').substr($(val).find('img').data('originalimage').lastIndexOf('/') + 1), thumbFileName: $(val).find('img').attr('src').substr($(val).find('img').attr('src').lastIndexOf('/') + 1), width: parseInt($(val).find('img').width(), 10), height: parseInt($(val).find('img').height(), 10) };
								content.images.push(imageObject);
				    		});

				    		content.settings.visibleThumbnails = $('select[name="visibleThumbnails"]').val();
				    		insertThumbnails($this, ui, content);
				    		$.fallr('hide');
				    	

			    	}},
				    button2 : {text: languagePack.fallr_cancel, onclick: function() {

							$('a.ThumbnailgalleryDrag').remove();
						    $Thumbnailgallery = makeThumbnailGalleryDraggable($('<a />').addClass('ThumbnailgalleryDrag').data('Thumbnailgallery', 1).css({ color: '#000000' }).html('<img src="img/icons/iconThumbnailsGallery.png" style="height: 16px; margin-right: 12px; margin-left: 7px;" />Thumbnail gallery'));
							$('div.widget-options-container > div.insertThumbnailContainer').html($Thumbnailgallery);
				    		
							// Remove placeholder
							GridController.removePlaceholders();

				    		$.fallr('hide');
				    		return false;

				    	}}
				    }
				},
			    function() {
                                hasUnsavedChanges = true;
			    	$('#fallr-button-button1').attr('id', 'btnThumbnailNextStep');
					$('#btnThumbnailNextStep').live('click', function() {

					    if ($('select[name="visibleThumbnails"]').val() == '--') {

						alert('Please choose how many visible thumbnails are going to be showed before proceeding.');
						return false;

					    } else {

			    		$('#btnThumbnailNextStep').attr('id', 'fallr-button-button1').text('Save');

					    $('ul.thumbnail-strip').sortable({
							start: function() {
							},
							stop: function() {

							},
					        placeholder: {
					 			element: function(currentItem) {
					            	return $('<li />').css({
					            		width: (parseInt(currentItem.width(), 10) - 10) + 'px',
					            		height: (parseInt(currentItem.height(), 10) - 10) + 'px',
					            		margin: '3px',
					            		backgroundColor: 'gray',
					            		opacity: '0.2',
					            		border: '1px black dotted',
					            		float: 'left'
					            	})[0];
						        },
						        update: function(container, p) {
						            return;
						        }
					        }
					    });

						$('#fileupload').fileupload({
					        dataType: 'json',
					        formData: [
					        	{ name: 'UUID', value: UUID },
					        	{ name: 'parentWidth', value: parentWidth },
					        	{ name: 'visibleThumbnails', value: parseInt($('select[name="visibleThumbnails"]').val(), 10) },
					        	{ name: 'showboxWidth', value: $('input[name="showboxWidth"]').val() },
					        	{ name: 'showboxHeight', value: $('input[name="showboxHeight"]').val() }
					        ],
					        add: function (e, data) {

					        	// Add loader to notify the user that we are doing something in the background.
					        	$('ul.thumbnail-strip').append('<li id="slideshowLoader" style="height: 50px; position: relative;"><img id="slideshowLoaderImage" src="' + urlDomBase + '/img/icons/iconPreloader.gif" style="position: absolute; height: 32px; width: 32px; top: 30px; left: 88px;" /></li>');

					        	data.submit();
					        },
					        done: function (e, data) {
					        	
					        	$('#slideshowLoader').remove();

					        	// Calculate the images display size in the gallery strip.
					        	if (data.result.width > data.result.height)
					        	{
					        		var maxWidth  = 130;
					        		var maxHeight = Math.round( (130 / (data.result.width / data.result.height)) );
					        	} else {
					        		var maxHeight = 130;
					        		var maxWidth  = Math.round( (130 / (data.result.height / data.result.width)) );
					        	}

					        	$thumbnail = $('<img />').attr('src', 'gallery/' + data.result.fileName)
														 .attr('data-originalimage', data.result.fileName.replace('_thumb', ''))
						        						 .data('width', data.result.width)
						        						 .data('height', data.result.height)
						        						 .css({ 'max-height': maxHeight + 'px', 'max-width': maxWidth + 'px' });

						        $delete 	= $('<span />')
						        					.on('click', function() {
						        						$(this).parent().remove();
						        					})
						        					.html('X').css({ 'text-align': 'center', cursor: 'pointer', position: 'absolute', top: '5px', right: '5px', width: '20px', height: '20px', 'background-color': 'red' });

					        	$('ul.thumbnail-strip').append(
					        		$('<li />').css({ width: '130px', position: 'relative' }).html([$thumbnail, $delete])
					        	);
					        },
					        error: function(jqXHR, textStatus, errorThrown) {
					        	$('#slideshowLoader').remove();
								alert('An unexpected error occured.' + "\n\nError description:\n\"" + jqXHR.responseText + '\n\n' + errorThrown + "\"\n\nPlease try uploading the image again or contact WaveCMS support including the error description.");
							}
						});

						$('#thumbnailImageUpload').show();
						$('#thumbnailSettings').hide();

						return false;

						}

					});

		    	});
                
                        // Text Object
                        }
			else if ($(ui.draggable).hasClass('TextObjDrag'))
                        {
                        //} else if (currentDragObject.hasClass('TextObjDrag')) {

                            ui.draggable.remove();
                            GridController.convertPlaceholderToNormal();
                            GridController.getNewCell().append( GridController.createTextObject(languagePack.text_object_placeholder) );

                            // Attach redactor to text object
                            var textObj = GridController.getNewCell().children('div[id^="imTextObject_"]');
                            textObj.click( function(e) { attachRedactor( textObj, e ); } );

                            GridController.markNewCellAsOld();

                            attachRedactor(textObj);
                            hasUnsavedChanges = true;

                            // Revert draggable object to sidemenu
                            $TextObj = makeTextObjDraggable($('<a />').addClass('TextObjDrag')
                                                                          .data('TextObj', 1)
                                                                          .css({ color: '#000000' })
                                                                          .html('<img src="img/icons/iconTextObj.png" style="height: 20px; margin-right: 6px; margin-left: 5px;" /> <span style="font-size: 12px;">' + languagePack.menu_add_text + '</span>'));
                            
                            $('div.widget-options-container > div.insertTextContainer').html($TextObj);

			} else {

		  		var UUID = new Date().getTime();
		  		content = { UUID: UUID, images: [], settings: {
		  						theme: 'calm',
		  						transistionEffect: null,
		  						autoPlay: true,
		  						stopOnHover: false,
		  						controls: true,
		  						caption: true,
		  						captionEffect: null,
		  						duration: null,
		  						delay: null,
		  						dimensions: null
		  				  }};

				var gapH    = 20;
				var gapW 	= 200;
				var boxH    = $(window).height() - gapH;     // bottom gap
				var boxW    = $(window).width() - gapW * 2;  // left + right gap
				$this = $(this);
				$.fallr('show', {
					icon 	: 'gear',
					closeKey        : true,
					closeOverlay    : true,
				    content : templateWOWSlider(),
				    width   : boxW,
				    height  : boxH,
					afterHide : function() {
				    	wrenchify();
						if (GridController.isPlaceholderVisible())
						{
							GridController.removePlaceholders();
						}
					},
				    buttons : {
				    	button1 : {text: 'Next step', onclick: function() {

				    		content.UUID = UUID;
							content.settings.theme 	   		   = $('select[name="theme"]').val();
				    		content.settings.transistionEffect = $('select[name="transistionEffect"]').val();
				    		content.settings.autoPlay 		   = $('input[name="autoPlay"]').is(':checked');
				    		content.settings.stopOnHover 	   = $('input[name="stopOnHover"]').is(':checked');
				    		content.settings.controls 		   = $('input[name="controls"]').is(':checked');
				    		content.settings.delay 			   = $('select[name="delay"]').val();
				    		content.settings.duration 		   = $('select[name="duration"]').val();
				    		content.settings.dimensions 	   = $('select[name="dimensions"]').val();

				    		if ($('select[name="captionEffect"]').val() == 'false')
				    		{
					    		content.settings.caption 		   = false;
					    	} else {
					    		content.settings.caption 		   = true;
					    		content.settings.captionEffect 	   = $('select[name="captionEffect"]').val();
					    	}

				    		var waitForBackend = function() {
				    			content.UUID = UUID;
					    		content.images = [];
					    		$('ul.WOWSlider-strip li').each(function(key, val) {

					    			if ($(this).attr('id') == 'slideshowLoaderImage')
					    			{
					    				// Skip image if it the slideshow upload icon.
					    				return true;
					    			}

					    			var imageObject = { fileName: $(val).find('img').attr('src').substr($(val).find('img').attr('src').lastIndexOf('/') + 1), 
										    			title: $.trim($(val).find('input[name="title"]').val()), 
										    			description: $.trim($(val).find('input[name="description"]').val()), 
										    			url: checkIfURLExist($.trim($(val).find('input[name="url"]').val())),
										    			width: $(val).find('img').width(),
										    			height: $(val).find('img').height() 
										    		  };

									content.images.push(imageObject);
					    		});

					    		insertWOWSlider($this, ui, content);
					    		$.fallr('hide');
					    	}

					    	$('#WOWSliderSettings').hide();
					    	$('#WOWSliderImageUpload').hide();
				    		$('#fallr').append('... Please wait.');
				    		queryBackend(urlUploadWOWSliderCrop, { UUID: UUID, dimensions: content.settings.dimensions }, waitForBackend, 'POST');

				    	}},
				    	button2 : {text: languagePack.fallr_cancel, onclick: function() {

							$('a.WOWSliderDrag').remove();

							// Remove placeholder
							GridController.removePlaceholders();

							$WOWSlider = makeWOWSliderDraggable($('<a />').addClass('WOWSliderDrag').data('WOWSlider', 1).css({ color: '#000000' }).html('<img src="img/icons/iconSlideshow.png" style="height: 20px; margin-right: 6px; margin-left: 5px;" />WaveSlider'));
							$WOWSlider.appendTo($('div.widget-options-container > div.wowsliderContainer'));
				    		$.fallr('hide');
				    		return false;

				    	}}
				    }
				},
			    function() {
                                hasUnsavedChanges = true;
			    	$('#fallr-button-button1').attr('id', 'btnWOWSliderNextStep');

			    	$('#btnWOWSliderNextStep').live('click', function() {

				    	$('#btnWOWSliderNextStep').attr('id', 'fallr-button-button1').text('Save');


					    $('ul.WOWSlider-strip').sortable({
							start: function() {
							},
							stop: function() {

							},
					        placeholder: {
					 			element: function(currentItem) {
					            	return $('<li />').css({
					            		width: (parseInt(currentItem.width(), 10) - 10) + 'px',
					            		height: (parseInt(currentItem.height(), 10) - 10) + 'px',
					            		margin: '3px',
					            		backgroundColor: 'gray',
					            		opacity: '0.2',
					            		border: '1px black dotted',
					            		float: 'left'
					            	})[0];
						        },
						        update: function(container, p) {
						            return;
						        }
					        }
					    });

						$('#fileupload').fileupload({
					        dataType: 'json',
					        formData: [
					        	{ name: 'UUID', value: UUID },
					        	{ name: 'dimensions', value: $('select[name="dimensions"] option:selected').val()}
					        ],
					        add: function (e, data) {

					        	// Add loader to notify the user that we are doing something in the background.
					        	$('ul.WOWSlider-strip').append('<li id="slideshowLoader" style="height: 50px; position: relative;"><img id="slideshowLoaderImage" src="' + urlDomBase + '/img/icons/iconPreloader.gif" style="position: absolute; height: 32px; width: 32px; top: 30px; left: 88px;" /></li>');

					        	data.submit();
					        },
					        done: function (e, data) {
					        	$('#slideshowLoader').remove();

					        	if (data.result.width > 200 || data.result.height > 200)
					        	{
					        		if (data.result.width >= data.result.height)
					        		{
					        			var width = 200;
					        			var height = 200 / (data.result.width / data.result.height);
					        		} else {
					        			var height = 200;
					        			var width  = 200 / (data.result.height / data.result.width);
					        		}
					        	} else {
					        		var width  = data.result.width;
					        		var height = data.result.height;
					        	}

					        	$('ul.WOWSlider-strip').append(
					        		$('<li />').css({ position: 'relative' }).html([
					        			$('<span>').css({ 'background-color': 'red', width: '20px', height: '20px', cursor: 'pointer', 'text-align': 'center', position: 'absolute', top: 0, right: 0 })
					        					   .text('X')
					        					   .on('click', function() {
					        					   		$(this).parent().remove();
					        					   }),
					        			$('<div />').css({
					        						  'margin-bottom': '10px',
					        						  width: '200px',
					        						  'max-width': '200px',
					        						  height: '200px',
					        						  'max-height': '200px',
					        						  'background-color': '#ffffff' }).html(
					        				$('<img />').css({ width: width + 'px', height: height + 'px', margin: ((200 - height) / 2) + 'px' + ' ' + ((200 - width) / 2) + 'px' }).attr('src', 'img/wowslider/images/' + UUID + '/original/' + data.result.fileName)
				        				),
					        			$('<input />').attr('name', 'title').attr('placeholder', languagePack.wowslider_placeholder_image_title),
					        			$('<input />').attr('name', 'description').attr('placeholder', languagePack.wowslider_placeholder_image_description),
					        			$('<input />').attr('name', 'url').attr('placeholder', languagePack.wowslider_placeholder_target_url)
					        		])
					        	);
					        },
					        error: function(jqXHR, textStatus, errorThrown) {
					        	$('#slideshowLoader').remove();
								alert('An unexpected error occured.' + "\n\nError description:\n\"" + jqXHR.responseText + '\n\n' + errorThrown + "\"\n\nPlease try uploading the image again or contact WaveCMS support including the error description.");
							}
				    	});

			    		$('#WOWSliderSettings').hide();
			    		$('#WOWSliderImageUpload').show();
			    		return false;
			    	});
		    	});
			}
			
			if ($('div.widget-options').is(':visible'))
			{
			    $('span.widget-icon-plus').removeClass('widget-selected');
			    $('div.widget-options').hide();
			}
			
			makeTextObjectsCSSButtonDroppable();
	  	}
	});

	// Make sure to substitue height with min-height on imContent, 
	// else this will break design on some cases.
    var wrapperHeight = $(GridController.wrapperID).css('height');
    if ( wrapperHeight ) {
        $(GridController.wrapperID).css('min-height', wrapperHeight);
        $(GridController.wrapperID).css('height', '');
    }

	isDragging = false;
	
    makeWrapperAreaSortable();
    
	$('.sortable').sortable({ cancel: '.note' });

	$('div.ui-sortable').on('mousemove', function(e) {

	    if (isDragging)
	    {
            
            // Lower z-index of menu, because e.pageX otherwise will not update
            // when hovering menu
            $('div.widget-container').css('z-index', 99);
            
			// Get trash bin coordinates
    		// X1 (we know this is always 0), X2, Y1, Y2
    		var trashCoordinates = [0, $('span.widget-icon-trash').outerWidth() + 20, $('span.widget-icon-trash').offset().top, parseInt($('span.widget-icon-trash').offset().top + $('span.widget-icon-trash').outerHeight(), 10)];

    		// If object is nearing the trash bin, we animate it's opacity to nearly zero.
    		// This is done to make the moved element less obtrusive to the user
    		// in the case he want's to discard it.
    		// If moving an image with opacity 100% to the trash bin, it can be hard
    		// to place cursor over the trash can, if the element blocks viewport.

    		if (e.pageX <= (trashCoordinates[1] + 130)) {
    			isDragging.item.css({ opacity: 0.2 });
    		}
    		else if (e.pageX > (trashCoordinates[1] + 130)) {
    			isDragging.item.css({ opacity: 1 });
    		}

    		// If cursor is over the trash can we animate the trash can icon to
    		// signal the possibility of interaction to the user
     		if (e.pageX >= trashCoordinates[0] && e.pageX <= trashCoordinates[1] && e.pageY >= trashCoordinates[2] && e.pageY <= trashCoordinates[3])
    		{
				$('span.widget-icon-trash > img').attr('src', urlDomBase + '/img/icons/iconTrashOpen.png');
    		} else {
    			$('span.widget-icon-trash > img').attr('src', urlDomBase + '/img/icons/iconTrash.png');
    		}
	    }
	});

	$('div.ui-sortable').on('mouseup', function() {
	    if (isDragging)
	    {
            
            // Reset z-index of menu
            $('div.widget-container').css('z-index', 2000000000);
            
			isDragging.item.css({ opacity: 1 });
	    }
	});

	$(document).on('keydown', function(e) {
		
		if (editor.state == 'crop' && e.keyCode == 13)
		{
			// Double click crop editor to finish cropping.
			$('div.jcrop-tracker').dblclick();
			return false;
		}
        
        // SHIFT + Drag (drag of single element in row)
		else if (e.keyCode == 16 && !isPressed)
		{

			isPressed = true;
            
			$(GridController.wrapperID + ' > div').sortable({
				start: function(e, ui) {
                    cellBorderHide();
					isDragging = ui;
                    cutScriptTagsBeforeDrag(ui);
				},
				stop: function(e, ui) {
					isDragging = false;
                    
                    var deleteStatus = deleteItemIfOverTrash(e, ui);

                    // Only insert script tags after drag if we are not deleting an item
                    // (we will otherwise be unable to delete waveslider for instance)
                    if ( ! deleteStatus ) {
                        insertScriptTagsAfterDrag(ui);
                    }

                    // Firefox clicks the text element after dragging of elements in the
                    // sortable area. This code prevents attaching of redactor within a
                    // given time after dragging.
                    dontAttachRedactor = true;
                    setTimeout(function(){
                        dontAttachRedactor = false;
                    }, 500);

                    makeTextObjectsCSSButtonDroppable();

				},
		        placeholder: {
		 			element: function(currentItem) {
		            	return $('<li />').css({
		            		width: (parseInt(currentItem.width(), 10) - 10) + 'px',
		            		height: (parseInt(currentItem.height(), 10) - 10) + 'px',
		            		margin: '3px',
		            		backgroundColor: 'gray',
		            		opacity: '0.2',
		            		border: '1px black dotted',
		            		float: 'left'
		            	})[0];
			        },
			        update: function(container, p) {
			            return;
			        }
		        }
		    });
		}

	}).on('keyup', function(e) {
		if (e.keyCode == 16 && isPressed)
		{
			isPressed = false;

			if (isDragging)
			{
				$(GridController.wrapperID + ' > div').sortable('cancel');
			}

			$(GridController.wrapperID + ' > div').sortable('destroy');

			makeWrapperAreaSortable();
		}
	});
    
    // Focus document in order to catch all keycodes (in firefox)
	window.focus();

	$('#tabs-2 > div.film-strip > ul > li').live('mouseenter', function() {
		$(this).append($('<div/>').html('X').addClass('delete'));
	}).live('mouseleave', function() {
		$(this).find('div.delete').remove();
	});

	$('#tabs-2 > div.film-strip > ul > li > div.delete').live('click', function() {

		var imageSrc = $(this).parent().find('img').attr('src'),
			imObject = imageGalleries[$(this).parents().eq(2).data('imobject')],
			object = $.grep(imObject.media, function(object) {
				return (object.thumb != imageSrc);
			});

		imObject.media = object;
		updateClassicSlideshowDOM(imObject);

		$(this).parent().remove();
	});

});

function templateClassicSlideshow(tab, imObject)
{
	if (tab == 'style')
	{

		var images = [];
		for (i = 0; i < imObject.media.length; i++)
		{
			images.push('<li><img style="display: block;" src="' + imObject.media[i].thumb + '" /></li>');
		}

		var content = '<div id="tabs">\
					  <ul class="tabs">\
					    <li class="selected"><a name="tab1">Style</a></li>\
					    <li><a name="tab2">List</a></li>\
					  </ul>\
					    <div class="tabs">\
						  <div id="tabs-1">\
						  	<form id="imGalleryControls">\
							  	<input type="checkbox" name="showButtons" value="1" ' + ((imObject.showButtons) ? 'checked="checked"' : '') + '> Show controlbar\
							  	<br />\
							  	<input type="checkbox" name="autoplay" 	  value="1" ' + ((imObject.autoplay) ? 'checked="checked"' : '') + '> Autostart\
							  	<br />\
							  	<input type="checkbox" name="random" 	  value="1" ' + ((imObject.random) ? 'checked="checked"' : '') + '> Show random picture\
							  	<br /><br />\
							  	<div style="float: left; height: 20px; padding: 8px 0; margin-right: 8px; width: 110px;">Color on controlbar</div>\
    				   		    <div class="colorSelector" id="colorSelector-gui" style="float: left;"><div style="background-color: ' + imObject.guiColor + '"></div></div>\
    				   		    <input type="hidden" name="guiColor" value="' + imObject.guiColor + '" />\
    				   		    <br /><br />\
							  	<div style="float: left; height: 20px; padding: 8px 0; margin-right: 8px; width: 110px;">Backgroung color </div>\
    				   		    <div class="colorSelector" id="colorSelector-background" style="float: left;"><div style="background-color: ' + imObject.backgroundColor + '"></div></div>\
    				   		    <input type="hidden" name="backgroundColor" value="' + imObject.backgroundColor + '" />\
    				   		    <br /><br />\
    				   		    Font size: <input type="text" name="fontSize" value="' + imObject.fontSize + '" style="width: 100px;" />\
							</form>\
						  </div>\
						  <div id="tabs-2" style="display: none;">\
						  	<span><i>Sort the order of the pictures in the slideshow by dragging them back and forth.</i></span>\
						  	<br /><br />\
						  	<div class="film-strip" data-imobject="' + imObject.target.replace('#', '') + '">\
						  		<ul>\
						  		' + images.join('') + '\
						  		</ul>\
						  	</div>\
						  	<div style="clear: both;">\
								<input id="fileupload" type="file" name="file" data-url="' + urlUploadSlideshow + '">\
						  	</div>\
						  </div>\
						</div>\
					</div>';
	}

	return content;
}

function updateClassicSlideshow(imObject)
{
	$.each($('#imGalleryControls > input, #imGalleryControls > select'), function(key, val) {
		if ($(this).is(':checkbox'))
		{
			if ($(this).is(':checked'))
			{
				imObject[$(this).attr('name')] = true;
			} else {
				imObject[$(this).attr('name')] = false;
			}
		} else {
			imObject[$(this).attr('name')] = $(this).val();
		}
	});

	//X5 v9
	if (x5Version == 9)
	{
		x5engine.imGallery.gallery(imObject);
	}
	//X5 v10
	else if (x5Version == 10)
	{
		x5engine.gallery(imObject);
	}
	
	updateClassicSlideshowDOM(imObject);
}

function updateClassicSlideshowDOM(imObject)
{
	$.each($('script:not(:empty)'), function(key, val) {

		var content = (new RegExp( imObject.target.toString().replace('#', '') + '_settings')).exec($(val).html());

		if (content) {

			// X5 v9
			if (x5Version == 9)
			{
				$(val).html('var ' + content[0] + ' = ' + JSON.stringify(imObject) + '; x5engine.imQueue.push_init("x5engine.imGallery.gallery(' + content[0] + ')");');
			}
			// X5 v10
			else if (x5Version == 10)
			{
				$(val).html('var ' + content[0] + ' = ' + JSON.stringify(imObject) + '; x5engine.boot.push("x5engine.gallery(' + content[0] + ')");');
			}

		}

	});
}

function updateClassicSlideshowOrder(imObject, list)
{
	var newMediaArray = [];
	$.each(list, function(key, val) {
		for (i = 0; i < imObject.media.length; i++)
		{
			if (imObject.media[i].thumb == $(val).find('img').attr('src'))
			{
				newMediaArray.push(imObject.media[i]);
			}
		}
	});

	imObject.media = newMediaArray;
	return imObject;
}

function templateWOWSlider(content)
{

	if (typeof content !== 'undefined')
	{
		var settings = content.settings;

		var images = '';
		$.each($(content.images).find('li'), function(key, val) {

			if ($(val).find('img').data('width') > 200 || $(val).find('img').data('height') > 200)
        	{
        		if ($(val).find('img').data('width') >= $(val).find('img').data('height'))
        		{
        			var width = 200;
        			var height = 200 / ($(val).find('img').data('width') / $(val).find('img').data('height'));
        		} else {
        			var height = 200;
        			var width  = 200 / ($(val).find('img').data('height') / $(val).find('img').data('width'));
        		}
        	} else {
        		var width  = $(val).find('img').data('width');
        		var height = $(val).find('img').data('height');
        	}

			images += '<li style="position: relative;">\
						<span class="removeWOWSliderImage" style="background-color: red; width: 20px; height: 20px; cursor: pointer; text-align: center; position: absolute; top: 0; right: 0;">X</span>\
						<div style="margin-bottom: 10px: width: 200px; max-width: 200px; height: 200px; max-height: 200px; background-color: #ffffff;">\
							<img style="width: ' + width + 'px; height: ' + height + 'px; margin: ' + ((200 - height) / 2) + 'px ' + ((200 - width) / 2) + 'px" src="' + $(val).find('img').attr('src').replace('scaled', 'original') + '">\
						</div>\
						<input name="title" placeholder="' + languagePack.wowslider_placeholder_image_title +'" value="' + $(val).find('img').attr('title') + '">\
						<input name="description" placeholder="' + languagePack.wowslider_placeholder_image_description + '" value="' + (($(val).text()) ? $(val).text() : '') + '">\
						<input name="url" placeholder="' + languagePack.wowslider_placeholder_target_url + '" value="' + (($(val).find('a').attr('href')) ? $(val).find('a').attr('href') : '') + '">\
					  </li>';
		});

		var optionDelay = '';
			
		for (i = 1; i <= 60; i++)
		{
			var selected = '';
			if (settings.delay == (i * 1000))
			{
				selected = 'selected="selected"';
			}
			optionDelay += '<option value="' + i + '" ' + selected + '>' + i + '</option>';
		}


		var optionDuration = '';
			
		for (i = 1; i <= 60; i++)
		{
			var selected = '';
			if (settings.duration == (i * 1000))
			{
				selected = 'selected="selected"';
			}
			optionDuration += '<option value="' + i + '" ' + selected + '>' + i + '</option>';
		}

		var content = '<div id="WOWSliderSettings" style="clear: both;">\
							<table style="width: 400px; border: 0;">\
								<tr>\
									<td>' + languagePack.wowslider_slideshow_theme + '</td>\
									<td>\
										<select name="theme">\
											<option value="terse" 		' + ((content.theme == 'terse') ? 'selected="selected"' : '') + '>Terse</option>\
											<option value="balance" 	' + ((content.theme == 'balance') ? 'selected="selected"' : '') + '>Balance</option>\
											<option value="elemental"	' + ((content.theme == 'elemental') ? 'selected="selected"' : '') + '>Elemental</option>\
											<option value="metro" 		' + ((content.theme == 'metro') ? 'selected="selected"' : '') + '>Metro</option>\
											<option value="block"		' + ((content.theme == 'block') ? 'selected="selected"' : '') + '>Block</option>\
										</select>\
									</td>\
								</tr>\
								<tr>\
									<td>' + languagePack.wowslider_autoplay_slideshow + '</td>\
									<td><input type="checkbox" value="1" name="autoPlay" ' + ((settings.autoPlay) ? 'checked="checked"' : '') + '></td>\
								</tr>\
								<tr>\
									<td>' + languagePack.wowslider_pause_on_mouseover + '</td>\
									<td><input type="checkbox" value="1" name="stopOnHover" ' + ((settings.stopOnHover) ? 'checked="checked"' : '') + '></td>\
								</tr>\
								<tr>\
									<td>' + languagePack.wowslider_show_prev_next_buttons + '</td>\
									<td><input type="checkbox" value="1" name="controls" ' + ((settings.controls) ? 'checked="checked"' : '') + '></td>\
								</tr>\
								<tr>\
									<td>' + languagePack.wowslider_show_descriptions + '</td>\
									<td>\
										<select name="captionEffect">\
											<option value="false" 	' + ((!settings.captionEffect) 			   ? 'selected="selected"' : '') + '>' + languagePack.wowslider_show_descriptions_no + '</option>\
											<option value="fade" 	' + ((settings.captionEffect == 'fade')    ? 'selected="selected"' : '') + '>' + languagePack.wowslider_show_descriptions_with_fade + '</option>\
											<option value="slide"   ' + ((settings.captionEffect == 'slide')   ? 'selected="selected"' : '') + '>' + languagePack.wowslider_show_descriptions_with_slide + '</option>\
											<option value="elastic" ' + ((settings.captionEffect == 'elastic') ? 'selected="selected"' : '') + '>' + languagePack.wowslider_show_descriptions_with_elastic_move + '</option>\
										</select>\
									</td>\
								</tr>\
								<!--\
								<tr>\
									<td>' + languagePack.wowslider_show_bullet_navigation + '</td>\
									<td>\
										<select>\
											<option>' + languagePack.wowslider_show_bullet_navigation_no + '</option>\
											<option>' + languagePack.wowslider_show_bullet_navigation_bullet_bottom + '</option>\
											<option>' + languagePack.wowslider_show_bullet_navigation_bullet_top + '</option>\
											<option>' + languagePack.wowslider_show_bullet_navigation_filmstrip_top + '</option>\
											<option>' + languagePack.wowslider_show_bullet_navigation_filmstrip_bottom + '</option>\
											<option>' + languagePack.wowslider_show_bullet_navigation_filmstrip_right + '</option>\
											<option>' + languagePack.wowslider_show_bullet_navigation_filmstrip_left + '</option>\
										</select>\
									</td>\
								</tr>\
								-->\
								<tr>\
									<td>' + languagePack.wowslider_image_size + '</td>\
									<td>\
										<select name="dimensions">\
											<option value="960x360" '  + ((String(settings.width + 'x' + settings.height) == '960x360') ? 'selected="selected"' : '') + '>960x360</option>\
											<option value="960x300" '  + ((String(settings.width + 'x' + settings.height) == '960x300') ? 'selected="selected"' : '') + '>960x300</option>\
											<option value="830x360" '  + ((String(settings.width + 'x' + settings.height) == '830x360') ? 'selected="selected"' : '') + '>830x360</option>\
											<option value="640x360" '  + ((String(settings.width + 'x' + settings.height) == '640x360') ? 'selected="selected"' : '') + '>640x360</option>\
											<option value="320x240" '  + ((String(settings.width + 'x' + settings.height) == '320x240') ? 'selected="selected"' : '') + '>320x240</option>\
											<option value="480x360" '  + ((String(settings.width + 'x' + settings.height) == '480x360') ? 'selected="selected"' : '') + '>480x360</option>\
											<option value="640x480" '  + ((String(settings.width + 'x' + settings.height) == '640x480') ? 'selected="selected"' : '') + '>640x480</option>\
											<option value="800x600" '  + ((String(settings.width + 'x' + settings.height) == '800x600') ? 'selected="selected"' : '') + '>800x600</option>\
											<option value="1024x768" ' + ((String(settings.width + 'x' + settings.height) == '1024x768') ? 'selected="selected"' : '') + '>1024x768</option>\
										</select>\
									</td>\
								</tr>\
								<tr>\
									<td>' + languagePack.wowslider_transistion_effect + '</td>\
									<td>\
										<select name="transistionEffect">\
											<option value="blast" 		 	'  + ((settings.effect == 'blast') ? 'selected="selected"' : '') + '>Blast</option>\
											<option value="blinds" 		 	'  + ((settings.effect == 'blinds') ? 'selected="selected"' : '') + '>Blinds</option>\
											<option value="basic" 		 	'  + ((settings.effect == 'basic') ? 'selected="selected"' : '') + '>Basic</option>\
											<option value="basic_linear" 	'  + ((settings.effect == 'basic_linear') ? 'selected="selected"' : '') + '>Basic linear</option>\
											<option value="blur" 		 	'  + ((settings.effect == 'blur') ? 'selected="selected"' : '') + '>Blur</option>\
											<option value="fade" 		 	'  + ((settings.effect == 'fade') ? 'selected="selected"' : '') + '>Fade</option>\
											<option value="fly" 		 	'  + ((settings.effect == 'fly') ? 'selected="selected"' : '') + '>Fly</option>\
											<!--\
											<option value="flip" 		 	'  + ((settings.effect == 'flip') ? 'selected="selected"' : '') + '>Flip</option>\
											-->\
											<option value="kenburns" 	 	'  + ((settings.effect == 'kenburns') ? 'selected="selected"' : '') + '>Kenburns</option>\
											<option value="squares" 	 	'  + ((settings.effect == 'squares') ? 'selected="selected"' : '') + '>Squares</option>\
											<option value="slices" 		 	'  + ((settings.effect == 'slices') ? 'selected="selected"' : '') + '>Slices</option>\
											<option value="stack" 			'  + ((settings.effect == 'stack') ? 'selected="selected"' : '') + '>Stack</option>\
											<option value="stack_vertical"  '  + ((settings.effect == 'stack_vertical') ? 'selected="selected"' : '') + '>Stack vertical</option>\
											<option value="rotate" 			'  + ((settings.effect == 'rotate') ? 'selected="selected"' : '') + '>Rotate</option>\
										</select>\
									</td>\
								</tr>\
								<tr>\
									<td>' + languagePack.wowslider_delay_between_slides + '</td>\
									<td>\
										<select name="delay">\
											' + optionDelay + '\
										</select>\
									</td>\
								</tr>\
								<tr>\
									<td>' + languagePack.wowslider_effect_duration + '</td>\
									<td>\
										<select name="duration">\
											' + optionDuration + '\
										</select>\
									</td>\
								</tr>\
							</table>\
				  	   </div>\
					   <div id="WOWSliderImageUpload" style="clear: both; display: none;">\
							<input id="fileupload" type="file" name="file" data-url="' + urlUploadWOWSliderUpload + '">\
					  	    <div>\
								<ul class="WOWSlider-strip">\
									' + images + '\
								</ul>\
							</div>\
				  	   </div>';

	} else {

		var optionDelay = '';
			
		for (i = 1; i <= 60; i++)
		{
			optionDelay += '<option value="' + i + '">' + i + '</option>';
		}

		var content = '<div id="WOWSliderSettings" style="clear: both;">\
							<table style="width: 400px; border: 0;">\
								<tr>\
									<td>' + languagePack.wowslider_slideshow_theme + '</td>\
									<td>\
										<select name="theme">\
											<option value="terse">Terse</option>\
											<option value="balance">Balance</option>\
											<option value="elemental">Elemental</option>\
											<option value="metro">Metro</option>\
											<option value="block">Block</option>\
										</select>\
									</td>\
								</tr>\
								<tr>\
									<td>' + languagePack.wowslider_autoplay_slideshow + '</td>\
									<td><input type="checkbox" value="1" name="autoPlay" checked="checked"></td>\
								</tr>\
								<tr>\
									<td>' + languagePack.wowslider_pause_on_mouseover + '</td>\
									<td><input type="checkbox" value="1" name="stopOnHover" checked="checked"></td>\
								</tr>\
								<tr>\
									<td>' + languagePack.wowslider_show_prev_next_buttons + '</td>\
									<td><input type="checkbox" value="1" name="controls" checked="checked"></td>\
								</tr>\
								<tr>\
									<td>' + languagePack.wowslider_show_descriptions + '</td>\
									<td>\
										<select name="captionEffect">\
											<option value="false">' + languagePack.wowslider_show_descriptions_no + '</option>\
											<option value="fade">' + languagePack.wowslider_show_descriptions_with_fade + '</option>\
											<option value="slide">' + languagePack.wowslider_show_descriptions_with_slide + '</option>\
											<option value="elastic">' + languagePack.wowslider_show_descriptions_with_elastic_move + '</option>\
										</select>\
									</td>\
								</tr>\
								<!--\
								<tr>\
									<td>' + languagePack.wowslider_show_bullet_navigation + '</td>\
									<td>\
										<select>\
											<option>' + languagePack.wowslider_show_bullet_navigation_no + '</option>\
											<option>' + languagePack.wowslider_show_bullet_navigation_bullet_bottom + '</option>\
											<option>' + languagePack.wowslider_show_bullet_navigation_bullet_top + '</option>\
											<option>' + languagePack.wowslider_show_bullet_navigation_filmstrip_top + '</option>\
											<option>' + languagePack.wowslider_show_bullet_navigation_filmstrip_bottom + '</option>\
											<option>' + languagePack.wowslider_show_bullet_navigation_filmstrip_right + '</option>\
											<option>' + languagePack.wowslider_show_bullet_navigation_filmstrip_left + '</option>\
										</select>\
									</td>\
								</tr>\
								-->\
								<tr>\
									<td>' + languagePack.wowslider_image_size + '</td>\
									<td>\
										<select name="dimensions">\
											<option value="960x360">960x360</option>\
											<option value="960x300">960x300</option>\
											<option value="830x360">830x360</option>\
											<option value="640x360">640x360</option>\
											<option value="320x240">320x240</option>\
											<option value="480x360">480x360</option>\
											<option value="640x480">640x480</option>\
											<option value="800x600">800x600</option>\
											<option value="1024x768">1024x768</option>\
										</select>\
									</td>\
								</tr>\
								<tr>\
									<td>' + languagePack.wowslider_transistion_effect + '</td>\
									<td>\
										<select name="transistionEffect">\
											<option value="blast">Blast</option>\
											<option value="blinds">Blinds</option>\
											<option value="basic" selected="selected">Basic</option>\
											<option value="basic_linear">Basic linear</option>\
											<option value="blur">Blur</option>\
											<option value="fade">Fade</option>\
											<option value="fly">Fly</option>\
											<!--\
											<option value="flip">Flip</option>\
											-->\
											<option value="kenburns">Kenburns</option>\
											<option value="squares">Squares</option>\
											<option value="slices">Slices</option>\
											<option value="stack">Stack</option>\
											<option value="stack_vertical">Stack vertical</option>\
											<option value="rotate">Rotate</option>\
										</select>\
									</td>\
								</tr>\
								<tr>\
									<td>' + languagePack.wowslider_delay_between_slides + '</td>\
									<td>\
										<select name="delay">\
											' + optionDelay + '\
										</select>\
									</td>\
								</tr>\
								<tr>\
									<td>' + languagePack.wowslider_effect_duration + '</td>\
									<td>\
										<select name="duration">\
											' + optionDelay + '\
										</select>\
									</td>\
								</tr>\
							</table>\
				  	   </div>\
					   <div id="WOWSliderImageUpload" style="clear: both; display: none;">\
							<input id="fileupload" type="file" name="file" data-url="' + urlUploadWOWSliderUpload + '">\
					  	    <div>\
							<ul class="WOWSlider-strip"></ul>\
							</div>\
				  	   </div>';
	}

	return content;
}



function templateThumbnails(scriptTagObject, parentElement)
{

	if (typeof scriptTagObject !== 'undefined')
	{
		// Check if we have imSPage objects. If this is the case,
		// we know, that checkbox rowsInFrames should be checked.
		if ($("#"+parentElement[0].id+" .imSPage > a").length)
		{
			// Since X5 does not really store any information about how many rows 
			// we should expect in each frame, we make an educated guess about it
			// by counting number of elements contained in the first div.imSPage
			var rowsInFrames = $("#"+parentElement[0].id+" .imSPage:first > a").length;
		} else {
			var rowsInFrames = false;
		}


	        var visibleThumbnails = '<option value="--">--</option>';
        	var visibleThumbnailsNum = parentElement.find('div[id^="imObjectGallery_"]').attr('data-visible-thumbnails');
		for (i = 2; i <= 20; i++)
		{
	            visibleThumbnails += '<option value="' + i + '"' + (visibleThumbnailsNum == i ? ' selected' : '') + '>' + i + '</option>';
		}

		var pictures = '';
		$.each(parentElement.find('div[id^="imObjectGallery_"] img'), function(key, value)
		{

        	// Calculate the images display size in the gallery strip.
        	if ($(value).width() > $(value).height())
        	{
        		var maxWidth  = 130;
        		var maxHeight = Math.round( (130 / ($(value).width() / $(value).height())) );
        	} else {
        		var maxHeight = 130;
        		var maxWidth  = Math.round( (130 / ($(value).height() / $(value).width())) );
        	}

			$thumbnail = $('<img />').attr('src', $(value).attr('src'))
									 .attr('data-originalimage', (($(value).parent().attr('href')) ? $(value).parent().attr('href') : $(value).attr('src')))
	        						 .data('width', $(value).width())
	        						 .data('height', $(value).height())
	        						 .css({ 'max-height': maxHeight + 'px', 'max-width': maxWidth + 'px' });

	        
	        $delete 	= $('<span />')
								.addClass('thumbnail-remove')
	        					.html('X').css({ 'text-align': 'center', cursor: 'pointer', position: 'absolute', top: '5px', right: '5px', width: '20px', height: '20px', 'background-color': 'red' });

        	pictures += $('<div />').html(
        								$('<li />').css({ width: '130px', position: 'relative' })
        										   .html([$thumbnail, $delete])
        								).html();

		});

		var content = '<div id="thumbnailSettings" style="clear: both;">\
							<table style="width: 400px; border: 0;">\
								<tr>\
									<td>' + languagePack.thumbnail_gallery_rows_pr_frame + '</td>\
									<td>\
										<input type="checkbox" value="1" name="rowsInFrames" onclick="showboxFieldsStateChange(' + "'rowsInFrames', ['rowsPrFrame']" + ');" ' + ((rowsInFrames) ? 'checked="checked"' : '') + '>\
										<input type="text" value="' + ((rowsInFrames) ? rowsInFrames : 0) + '" name="rowsPrFrame" style="width: 40px; ' + ((rowsInFrames) ? '' : 'background-color: rgb(202, 201, 201);') + '" />\
									</td>\
								</tr>\
								<tr>\
									<td>' + languagePack.thumbnail_gallery_visible_thumbnails + '</td>\
									<td>\
										<select name="visibleThumbnails" style="width: 40px;">\
											' + visibleThumbnails + '\
										</select>\
									</td>\
								</tr>\
								<tr>\
									<td>' + languagePack.thumbnail_gallery_display_enlarged_images + '</td>\
									<td><input type="checkbox" value="1" name="showbox" checked="checked" onclick="showboxFieldsStateChange(' + "'showbox', ['showboxWidth', 'showboxHeight']" + ');"></td>\
								</tr>\
								<tr>\
									<td>' + languagePack.thumbnail_gallery_maximum_width + '</td>\
									<td>\
										<input type="text" value="960" name="showboxWidth" style="width: 40px;" />\
									</td>\
								</tr>\
								<tr>\
									<td>' + languagePack.thumbnail_gallery_maximum_height + '</td>\
									<td>\
										<input type="text" value="640" name="showboxHeight" style="width: 40px;" />\
									</td>\
								</tr>\
							</table>\
				  	   </div>\
					   <div id="thumbnailImageUpload" style="clear: both; display: none;">\
							<input id="fileupload" type="file" name="file" data-url="' + urlUploadThumbnails + '">\
					  	    <div>\
							<ul class="thumbnail-strip">\
								' + pictures + '\
							</ul>\
							</div>\
				  	   </div>';
	} else {


		var visibleThumbnails = '';
		var visibleThumbnailsNum = '4';
		if (typeof parentElement !== 'undefined' && parentElement.find('div[id^="imObjectGallery_"]').length > 0) {
			visibleThumbnailsNum = parentElement.find('div[id^="imObjectGallery_"]').attr('data-visible-thumbnails');
		}	
		for (i = 2; i <= 20; i++)
		{
			visibleThumbnails += '<option value="' + i + '"' + (visibleThumbnailsNum == i ? ' selected' : '') + '>' + i + '</option>';
		}

		var content = '<div id="thumbnailSettings" style="clear: both;">\
							<table style="width: 400px; border: 0;">\
								<tr>\
									<td>' + languagePack.thumbnail_gallery_rows_pr_frame + '</td>\
									<td>\
										<input type="checkbox" value="1" name="rowsInFrames" onclick="showboxFieldsStateChange(' + "'rowsInFrames', ['rowsPrFrame']" + ');">\
										<input type="text" value="2" name="rowsPrFrame" style="width: 40px; background-color: rgb(202, 201, 201);" />\
									</td>\
								</tr>\
								<tr>\
									<td>' + languagePack.thumbnail_gallery_visible_thumbnails + '</td>\
									<td>\
										<select name="visibleThumbnails" style="width: 40px;">\
											' + visibleThumbnails + '\
										</select>\
									</td>\
								</tr>\
								<tr>\
									<td>' + languagePack.thumbnail_gallery_display_enlarged_images + '</td>\
									<td><input type="checkbox" value="1" name="showbox" checked="checked" onclick="showboxFieldsStateChange(' + "'showbox', ['showboxWidth', 'showboxHeight']" + ');"></td>\
								</tr>\
								<tr>\
									<td>' + languagePack.thumbnail_gallery_maximum_width + '</td>\
									<td>\
										<input type="text" value="960" name="showboxWidth" style="width: 40px;" />\
									</td>\
								</tr>\
								<tr>\
									<td>' + languagePack.thumbnail_gallery_maximum_height + '</td>\
									<td>\
										<input type="text" value="640" name="showboxHeight" style="width: 40px;" />\
									</td>\
								</tr>\
							</table>\
				  	   </div>\
					   <div id="thumbnailImageUpload" style="clear: both; display: none;">\
							<input id="fileupload" type="file" name="file" data-url="' + urlUploadThumbnails + '">\
					  	    <div>\
							<ul class="thumbnail-strip"></ul>\
							</div>\
				  	   </div>';
	}

	return content;
}


/**
 * cellBorderHide
 * 
 * Hides cell hover border
 * 
 * @returns {undefined}
 */
function cellBorderHide() {
    $('div.hover-border.top, div.hover-border.right, div.hover-border.bottom, div.hover-border.left').hide();
}


function showboxFieldsStateChange(checkbox, fields) {
	if ($('input[name="' + checkbox + '"]').is(':checked'))
	{
		for (i = 0; i < fields.length; i++)
		{
			$('input[name="' + fields[i] + '"]').removeAttr('disabled').css({ 'background-color': '#ffffff' });
		}
	} else {
		for (i = 0; i < fields.length; i++)
		{
			$('input[name="' + fields[i] + '"]').attr('disabled', 'disabled').css({ 'background-color': '#cac9c9' });
		}
	}
}

/**
 * cutScriptTagsBeforeDrag
 * 
 * Will cut out script tags of elements that are being dragged, because
 * jQuery sortable/draggable otherwise will mess up and remove the script tag.
 * 
 * @param {type} ui
 * @returns {undefined}
 */
function cutScriptTagsBeforeDrag( ui ) {

	if (draggedElementHasWOWSlider(ui))
	{
	    $(ui.item).find('script:not([type="text/xml"])').each( function () {
	        $(this).attr('type', 'text/xml');       
	    });
	} else {
	    $(ui.item).find('script').each( function () {
	        
	        // Save script in array
	        scriptsCuttetBeforeDrag.push( $(this) );
	        
	        // Remove script
	        $(this).replaceWith('<!-- WAVECMS-SCRIPT-CUT-' + (scriptsCuttetBeforeDrag.length - 1) + ' -->');
	        
	    });
	}
    
}

function insertScriptTagsAfterDrag( ui ) {
	if (draggedElementHasWOWSlider(ui))
	{
	    $(ui.item).find('script').each( function () {
	        $(this).attr('type', 'text/javascript');       
	    });
	} else {
	    $('div[id^="imTextObject_"], h1, h2, h3, h4, h5').destroyEditor();

	    // Loop through all scripts that have been cut out from the dragged element
	    for (var i = 0; i < scriptsCuttetBeforeDrag.length; i++) {
	        //$(ui.item).html( $(ui.item).html().replace('<!-- WAVECMS-SCRIPT-CUT-' + i + ' -->', $(scriptsCuttetBeforeDrag[i])[0].outerHTML ) );
	        $(ui.item)[0].innerHTML = $(ui.item)[0].innerHTML.replace('<!-- WAVECMS-SCRIPT-CUT-' + i + ' -->', $(scriptsCuttetBeforeDrag[i])[0].outerHTML );
	    }

	    $('div[id^="imTextObject_"], h1, h2, h3, h4, h5').on('click', function(e) { attachRedactor(this, e); } );
	    wrenchify();
	    
	    // Empty array
	    scriptsCuttetBeforeDrag = [];
	}
    
}

function draggedElementHasWOWSlider( ui ) {
    // Determine which type of dragged item we are dealing with.
    // This is needed since we must determine if we are handling WOWSlider.
    if ($(ui.item).find('div[id^="wowslider-container"]') ) {
		return true;
	} else {
		return false;
	}
}

function showEditHTMLObjectFallr( HTMLObject, markupArray, key ) {

	if (typeof HTMLObject.attr('data-forceheight') !== 'undefined')
	{
		var forceHeightChecked = true,
			forceHeightValue = HTMLObject.attr('data-forceheight') + 'px';
	} else {
		var forceHeightChecked = false,
			forceHeightValue = '';
	}

	$.fallr('show', {
		width: '960px',
		buttons : {
			button1 : {text: languagePack.fallr_save, onclick: function() {																									

				// Check if manual height has been forced.
				var forceHeight = $.trim($('input[name="forceHeight"]').val().replace('px', ''));
				if (!$('input[name="forceHeight"]').is(':disabled') && !isNaN(forceHeight))
				{
					HTMLObject.css({ height: forceHeight }).attr('data-forceheight', forceHeight);
				} else {
					HTMLObject.css({ height: 'auto' }).removeAttr('data-forceheight');
				}

				HTMLObject[0].innerHTML = $('#HTMLObjectTextarea').val();
				$HTMLContent = HTMLObject;

				$.each($HTMLContent.find('script'), function(key, value) {
					var $clone = $(this).clone().attr('type', 'text/xml');
					$clone.insertAfter($(this));
				});

				HTMLObject.html( $HTMLContent[0].innerHTML );
				wrenchify(true);

				$.fallr('hide');
			}},
			button2 : {text: languagePack.fallr_cancel, onclick: function() { wrenchify(); $.fallr('hide'); }}
		},
		content : '<input type="checkbox" name="manualHeight" onclick="showboxFieldsStateChange(' + "'manualHeight', ['forceHeight']" + ');" ' + ((forceHeightChecked) ? 'checked="checked"' : '') + ' />' + languagePack.html_manual_height + '\
				   <input type="text" value="' + forceHeightValue + '" name="forceHeight" placeholder="Enter height in pixels" ' + ((!forceHeightChecked) ? 'style="background-color: #cac9c9;" disabled="disabled"' : '') + ' />\
				   ' + languagePack.html_enter_markup + '\
				   <textarea id="HTMLObjectTextarea" style="height: 400px;">' + markupArray[key] + '</textarea>',
		icon    : 'plus',
		position: 'center',
        afterHide : function() {
            if (GridController.isPlaceholderVisible())
            {
                GridController.removePlaceholders();
            }
        },
		closeKey: true,
		closeOverlay: true
	}, function() {
		$('#HTMLObjectTextarea').focus().keydown(function(e) {
			var $this, 
				end, 
				start;

			if (e.keyCode === 9) 
			{
				start = this.selectionStart;
				end = this.selectionEnd;
				$this = $(this);
				$this.val($this.val().substring(0, start) + "\t" + $this.val().substring(end));
				this.selectionStart = this.selectionEnd = start + 1;
				return false;
			}
		});
	});

}

/**
 * Drop CSS button on text objects
 */
function makeTextObjectsCSSButtonDroppable() {

	// Make area droppable
	$('div[id^="imTextObject_"] span, div[id^="imTextObject_"] p').droppable({
			accept: 'a.button',
	      	drop: function(event, ui) {

                // Since some spans are inside p tags and vise versa, this event
                // will be called 2 times. We are preventing double action by setting
                // a variable.
				if ( ! isCSSBtnDropInProgress) {

					isCSSBtnDropInProgress = true;

					$('body').css({ cursor: 'pointer' });

                    // Hide CSS button while fallr is open
                    $(ui.draggable).css('opacity', '0');

					if (ui.draggable.data('new') == 1)
					{

						// Grab all files in project and generate a list of these for the dropdown.
						var options = (function() {
							options = '';
							for (i = 0; i < projectFiles.menu.length; i++)
							{
								options += '<option value="' + projectFiles.menu[i] + '">' + projectFiles.menu[i] + '</option>\n';
							}
							return options;
						})();

						$currentTextObject = $(this);

						$.fallr('show', {
							buttons : {
								button1 : {text: languagePack.fallr_ok, onclick: function() {

                                    $currentCell = $currentTextObject.closest('[id^="imCellStyle_"]');
                                    
                                    // Calculating new bottom padding for cell element - before button is appended to cell
                                    var paddingBottom = parseInt($currentCell.css("padding-bottom").replace("px", ""));
                                    $currentCell.data("total-height", ($currentCell.height()+paddingBottom));
                                    
									var button = makeDraggable(ui.draggable.data('new', 0)
												.css({ top: 0, left: 0, color: $('#colorSelector-cssbtn div').css('backgroundColor') })
												.text($('input[name="title"]').val())
												.attr('href', checkIfURLExist($('input[name="ufd-url"]').val()))
												.draggable('destroy'), false).addClass('placed');

                                    $currentTextObject.append(button);

                                    var newPaddingBottom = $currentCell.data("total-height") - $currentCell.height();
                                    
                                    if (paddingBottom && paddingBottom != 0 && newPaddingBottom > 0) {
                                            $currentCell.css("padding-bottom", newPaddingBottom + "px");
                                    }

									$('a.clone').css({ marginTop: 0 }).removeClass('clone');
									hasUnsavedChanges = true;
									$.fallr('hide');
								}},
								button2 : {text: languagePack.fallr_cancel, onclick: function() { $.fallr('hide'); return false;  }}
							},
							content : '' + languagePack.btn_title + '<input type="text" name="title" value="">\
									   <br /><br />\
									   ' + languagePack.btn_link + '<br />\
									   <select id="link" name="url" style="width: 270px;">\
											' + options + '\
									   </select>\
									   <div style="float: left; height: 20px; padding: 8px 0; margin-right: 8px;">' + languagePack.btn_color_link + '</div>\
									   <div class="colorSelector" id="colorSelector-cssbtn" style="float: left;"><div style="background-color: #515f6a"></div></div>',
							icon    : 'plus',
							position: 'center',
							closeKey: true,
							closeOverlay: true,
							afterHide: function() {
								// Check if button has been place or not.
								// If not we remove it.
								if (!ui.draggable.hasClass('placed'))
								{
									ui.draggable.remove();
								}

								$('a.clone').css({ marginTop: 0 }).removeClass('clone');

                                // Hide CSS button while fallr is open
                                $(ui.draggable).css('opacity', '1');

								isCSSBtnDropInProgress = false;
							}
						}, function() {
							$('#link').ufd();

							$('#colorSelector-cssbtn').ColorPicker({
								color: '#515f6a',
								onShow: function (colpkr) {
									$(colpkr).fadeIn(500);
									return false;
								},
								onHide: function (colpkr) {
									$(colpkr).fadeOut(500);
									return false;
								},
								onChange: function (hsb, hex, rgb) {
									$('#colorSelector-cssbtn div').css('backgroundColor', '#' + hex);
								}
							});
						});

					} else {
						$(ui.draggable).css({ top: 0, left: 0 }).insertAfter($(this));
                        
                        // Hide CSS button while fallr is open
                        $(ui.draggable).css('opacity', '1');

						isCSSBtnDropInProgress = false;
					}
                    
				}

	      	}
	});
}

/**
 * deleteItemIfOverTrash
 * 
 * Deletes item (ui) if it is hovering the trashbin
 *
 */
function deleteItemIfOverTrash(e, ui) {

    // Get trash bin coordinates
    // X1 (we know this is always 0), X2, Y1, Y2
    var trashCoordinates = [0, $('span.widget-icon-trash').outerWidth(), $('span.widget-icon-trash').offset().top, parseInt($('span.widget-icon-trash').offset().top + $('span.widget-icon-trash').outerHeight(), 10)];

    // If we move the cursor over the trash bin, we discard of the element.
    // Is cursor over trash bin?
    if (e.pageX >= trashCoordinates[0] && e.pageX <= trashCoordinates[1] && e.pageY >= trashCoordinates[2] && e.pageY <= trashCoordinates[3])
    {

        // Yep. Remove the item from DOM.
        ui.item.remove();

        // Restore normal trash icon
        $('span.widget-icon-trash > img').attr('src', urlDomBase + '/img/icons/iconTrash.png');

        // Adjust pagemenu height
        GridController.adjustPageMenuHeight();   

        // Adjust conten wrapper height
        adjustPageHeight();

        return true;

    } else {
        return false;
    }

}

function adjustPageHeight() {

	$(GridController.wrapperID).css({ 'min-height': 0 });
	var newHeight = $(GridController.wrapperID).height();

	// Background grahpics / background color will make a minimum height we must respect
	if ($('#imContentGraphics').length && $('#imContentGraphics').height() > newHeight) newHeight = $('#imContentGraphics').height();

	$(GridController.wrapperID).css({ 'min-height': newHeight + 'px' });
}

/**
 * adjustTextObjectCellHeight
 * 
 * Adjust height of cell to height of inner element
 * 
 * @param element element
 */
function adjustTextObjectCellHeight(element) {

    // Adjust height of imCellStyle_X
    $(element).parent('[id^="imCellStyle_"]').css('min-height', $(element).height() + 'px');

    // Adjust height of imCell_X
    $(element).closest('[id^="imCell_"]').css('min-height', $(element).height() + 'px');

}

function pixelsToInt(pixelString) {
    if (typeof pixelString !== 'undefined') {
        return parseInt(pixelString.replace('px', ''));
    } else {
        return 0;
    }
}

function adjustColsHeightInRow(elementFromRow) {
    var $row = $(elementFromRow).closest('[data-cms-grid="row"]'),
        $cellParentDiv = $row.children('[data-cms-grid="cellParentDiv"]'),
        $cellParentColDiv = $row.children('[data-cms-grid="cellParentColDiv"]'),
        colHeight = [];

    if ($cellParentDiv.length) {
        $cellParentDiv.each(function(){
            var $cell           = $(this).children('[data-cms-grid]'),
                $cellStyle      = $cell.children('[id^="imCellStyle_"]'),
                orgCellHeight           = pixelsToInt($cell.css('height')),
                orgCellMinHeight        = pixelsToInt($cell.css('min-height')),
                orgCellStyleHeight      = pixelsToInt($cellStyle.css('height')),
                orgCellStyleMinHeight   = pixelsToInt($cellStyle.css('min-height')),
                orgCellStylePaddingBtm  = pixelsToInt($cellStyle.css('padding-bottom'));

            // Reset heights to obtain real automatic height
            $cell.css({
                'height': '',
                'min-height': '0px'
            });
            $cellStyle.css({
                'height': '',
                'min-height': '0px',
                'padding-bottom': '0px'
            });

            // Save automatic height
            colHeight.push($(this).children('[data-cms-grid]').height());

            // Revert heights (and convert padding-bottom to additional height)
            // Also remove 'height' and set the highest of 'height' and 'min-height' as 'min-height'
            $cell.css('min-height', Math.max(orgCellHeight, orgCellMinHeight));
            $cellStyle.css('min-height', Math.max(orgCellStyleHeight, orgCellStyleMinHeight));
        });

        var largestHeight = Math.max.apply(Math, colHeight);

        // Apply new max height
        $cellParentDiv.each(function(){
            var $cell           = $(this).children('[data-cms-grid]'),
                $cellStyle      = $cell.children('[id^="imCellStyle_"]');

            $cell.css('min-height', largestHeight);
            $cellStyle.css('min-height', largestHeight);
        });
        
    } else if ($cellParentColDiv.length) {
        
    }

}

/**
 * makeWrapperAreaSortable
 * 
 * Attaches sortable to the wrapper area
 */
function makeWrapperAreaSortable() {
    
    $(GridController.wrapperID).sortable({
		start: function(e, ui) {
			cellBorderHide();
			isDragging = ui;
            cutScriptTagsBeforeDrag(ui);
		},
		stop: function(e, ui) {

			isDragging = false;
            var deleteStatus = deleteItemIfOverTrash(e, ui);

            // Only insert script tags after drag if we are not deleting an item
            // (we will otherwise be unable to delete waveslider for instance)
            if ( ! deleteStatus ) {
                insertScriptTagsAfterDrag(ui);
            }

            // Firefox clicks the text element after dragging of elements in the
            // sortable area. This code prevents attaching of redactor within a
            // given time after dragging.
            dontAttachRedactor = true;
            setTimeout(function(){
                dontAttachRedactor = false;
            }, 500);
            
			makeTextObjectsCSSButtonDroppable();

		},
        placeholder: {
 			element: function(currentItem) {
            	return $('<li />').css({
            		width: (parseInt(currentItem.width(), 10) - 10) + 'px',
            		height: (parseInt(currentItem.height(), 10) - 10) + 'px',
            		margin: '3px',
            		backgroundColor: 'gray',
            		opacity: '0.2',
            		border: '1px black dotted',
            		float: 'left'
            	})[0];
	        },
	        update: function(container, p) {
	            return;
	        }
        }
    });
    
}

/**
 * refreshSn
 * 
 * Refresh session
 */
var refreshSn = function ()
{
    var time = (1000 * 60 * 2); // last digit is minutes
    setTimeout(
        function ()
        {
            $.ajax({
                url: 'index.php?c=cms&m=refreshSession',
                cache: false,
                complete: function (data) {
                    
                    // Login active, run new refresh
                    if (data.responseText == 'updated') {
                        refreshSn();
                    // Login expired - session is no longer active
                    } else {
                        if ( $('#fallr').length > 0 ) {
                            $.fallr('hide', function() {
                                showLoginTimedOutBox();
                            });
                        } else {
                            showLoginTimedOutBox();
                        }
                    }
                }
            });
        },
        time
    );
};

/**
 * showLoginTimedOutBox
 * 
 * Fallr box that informs the user that their login timed out and provides 
 * a relogin button
 */
var showLoginTimedOutBox = function ()
{
    $.fallr('show', {
        buttons : {
            button1:{ text: languagePack.login_timeout_btn_login, onclick: function () { location.href='index.php?c=cms&m=login'; } }
        },
        content : languagePack.login_timeout_description,
        icon    : 'gear',
        position: 'center'
    });
};

function IsJsonString(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}

var ControlbarCloseSubmenus = function() {
    if ($('div.advanced-settings').is(':visible')) {
        $('div.advanced-settings').removeClass('widget-selected');
        $('div.advanced-settings').hide();
    }
    if ($('div.widget-options').is(':visible')) {
        $('div.widget-options').removeClass('widget-selected');
        $('div.widget-options').hide();
    }
};
